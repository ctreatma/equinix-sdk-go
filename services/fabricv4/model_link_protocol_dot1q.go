/*
Equinix Fabric API v4

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the LinkProtocolDot1q type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinkProtocolDot1q{}

// LinkProtocolDot1q Connection link protocol configuration - DOT1Q
type LinkProtocolDot1q struct {
	Type *LinkProtocolType `json:"type,omitempty"`
	// Tag protocol identifier
	TagProtocolId *string `json:"tagProtocolId,omitempty"`
	// VLAN tag
	VlanTag string `json:"vlanTag"`
	// VLAN tag Min value specified for DOT1Q connections
	VlanTagMin *int32 `json:"vlanTagMin,omitempty"`
	// VLAN tag Max value specified for DOT1Q connections
	VlanTagMax           *int32 `json:"vlanTagMax,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LinkProtocolDot1q LinkProtocolDot1q

// NewLinkProtocolDot1q instantiates a new LinkProtocolDot1q object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkProtocolDot1q(vlanTag string) *LinkProtocolDot1q {
	this := LinkProtocolDot1q{}
	this.VlanTag = vlanTag
	return &this
}

// NewLinkProtocolDot1qWithDefaults instantiates a new LinkProtocolDot1q object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkProtocolDot1qWithDefaults() *LinkProtocolDot1q {
	this := LinkProtocolDot1q{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LinkProtocolDot1q) GetType() LinkProtocolType {
	if o == nil || IsNil(o.Type) {
		var ret LinkProtocolType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkProtocolDot1q) GetTypeOk() (*LinkProtocolType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LinkProtocolDot1q) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given LinkProtocolType and assigns it to the Type field.
func (o *LinkProtocolDot1q) SetType(v LinkProtocolType) {
	o.Type = &v
}

// GetTagProtocolId returns the TagProtocolId field value if set, zero value otherwise.
func (o *LinkProtocolDot1q) GetTagProtocolId() string {
	if o == nil || IsNil(o.TagProtocolId) {
		var ret string
		return ret
	}
	return *o.TagProtocolId
}

// GetTagProtocolIdOk returns a tuple with the TagProtocolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkProtocolDot1q) GetTagProtocolIdOk() (*string, bool) {
	if o == nil || IsNil(o.TagProtocolId) {
		return nil, false
	}
	return o.TagProtocolId, true
}

// HasTagProtocolId returns a boolean if a field has been set.
func (o *LinkProtocolDot1q) HasTagProtocolId() bool {
	if o != nil && !IsNil(o.TagProtocolId) {
		return true
	}

	return false
}

// SetTagProtocolId gets a reference to the given string and assigns it to the TagProtocolId field.
func (o *LinkProtocolDot1q) SetTagProtocolId(v string) {
	o.TagProtocolId = &v
}

// GetVlanTag returns the VlanTag field value
func (o *LinkProtocolDot1q) GetVlanTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VlanTag
}

// GetVlanTagOk returns a tuple with the VlanTag field value
// and a boolean to check if the value has been set.
func (o *LinkProtocolDot1q) GetVlanTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VlanTag, true
}

// SetVlanTag sets field value
func (o *LinkProtocolDot1q) SetVlanTag(v string) {
	o.VlanTag = v
}

// GetVlanTagMin returns the VlanTagMin field value if set, zero value otherwise.
func (o *LinkProtocolDot1q) GetVlanTagMin() int32 {
	if o == nil || IsNil(o.VlanTagMin) {
		var ret int32
		return ret
	}
	return *o.VlanTagMin
}

// GetVlanTagMinOk returns a tuple with the VlanTagMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkProtocolDot1q) GetVlanTagMinOk() (*int32, bool) {
	if o == nil || IsNil(o.VlanTagMin) {
		return nil, false
	}
	return o.VlanTagMin, true
}

// HasVlanTagMin returns a boolean if a field has been set.
func (o *LinkProtocolDot1q) HasVlanTagMin() bool {
	if o != nil && !IsNil(o.VlanTagMin) {
		return true
	}

	return false
}

// SetVlanTagMin gets a reference to the given int32 and assigns it to the VlanTagMin field.
func (o *LinkProtocolDot1q) SetVlanTagMin(v int32) {
	o.VlanTagMin = &v
}

// GetVlanTagMax returns the VlanTagMax field value if set, zero value otherwise.
func (o *LinkProtocolDot1q) GetVlanTagMax() int32 {
	if o == nil || IsNil(o.VlanTagMax) {
		var ret int32
		return ret
	}
	return *o.VlanTagMax
}

// GetVlanTagMaxOk returns a tuple with the VlanTagMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkProtocolDot1q) GetVlanTagMaxOk() (*int32, bool) {
	if o == nil || IsNil(o.VlanTagMax) {
		return nil, false
	}
	return o.VlanTagMax, true
}

// HasVlanTagMax returns a boolean if a field has been set.
func (o *LinkProtocolDot1q) HasVlanTagMax() bool {
	if o != nil && !IsNil(o.VlanTagMax) {
		return true
	}

	return false
}

// SetVlanTagMax gets a reference to the given int32 and assigns it to the VlanTagMax field.
func (o *LinkProtocolDot1q) SetVlanTagMax(v int32) {
	o.VlanTagMax = &v
}

func (o LinkProtocolDot1q) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinkProtocolDot1q) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.TagProtocolId) {
		toSerialize["tagProtocolId"] = o.TagProtocolId
	}
	toSerialize["vlanTag"] = o.VlanTag
	if !IsNil(o.VlanTagMin) {
		toSerialize["vlanTagMin"] = o.VlanTagMin
	}
	if !IsNil(o.VlanTagMax) {
		toSerialize["vlanTagMax"] = o.VlanTagMax
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LinkProtocolDot1q) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vlanTag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLinkProtocolDot1q := _LinkProtocolDot1q{}

	err = json.Unmarshal(data, &varLinkProtocolDot1q)

	if err != nil {
		return err
	}

	*o = LinkProtocolDot1q(varLinkProtocolDot1q)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "tagProtocolId")
		delete(additionalProperties, "vlanTag")
		delete(additionalProperties, "vlanTagMin")
		delete(additionalProperties, "vlanTagMax")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLinkProtocolDot1q struct {
	value *LinkProtocolDot1q
	isSet bool
}

func (v NullableLinkProtocolDot1q) Get() *LinkProtocolDot1q {
	return v.value
}

func (v *NullableLinkProtocolDot1q) Set(val *LinkProtocolDot1q) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkProtocolDot1q) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkProtocolDot1q) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkProtocolDot1q(val *LinkProtocolDot1q) *NullableLinkProtocolDot1q {
	return &NullableLinkProtocolDot1q{value: val, isSet: true}
}

func (v NullableLinkProtocolDot1q) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkProtocolDot1q) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
