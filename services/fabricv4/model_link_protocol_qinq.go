/*
Equinix Fabric API v4

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the LinkProtocolQinq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinkProtocolQinq{}

// LinkProtocolQinq Connection link protocol configuration - QINQ
type LinkProtocolQinq struct {
	Type *LinkProtocolType `json:"type,omitempty"`
	// Inner tag protocol identifier
	InnerTagProtocolId int32 `json:"innerTagProtocolId"`
	// Outer tag protocol identifier
	OuterTagProtocolId int32 `json:"outerTagProtocolId"`
	// Inner tag, i.e., C-VLAN tag
	VlanCTag int32 `json:"vlanCTag"`
	// Outer tag, i.e., S-VLAN tag
	VlanSTag int32 `json:"vlanSTag"`
	// Outer tag Min value specified for QINQ connections
	VlanCTagMin *int32 `json:"vlanCTagMin,omitempty"`
	// Outer tag Max value specified for QINQ connections
	VlanCTagMax *int32 `json:"vlanCTagMax,omitempty"`
	// Subinterface identifier
	SubInterface         *int32 `json:"subInterface,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LinkProtocolQinq LinkProtocolQinq

// NewLinkProtocolQinq instantiates a new LinkProtocolQinq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkProtocolQinq(innerTagProtocolId int32, outerTagProtocolId int32, vlanCTag int32, vlanSTag int32) *LinkProtocolQinq {
	this := LinkProtocolQinq{}
	this.InnerTagProtocolId = innerTagProtocolId
	this.OuterTagProtocolId = outerTagProtocolId
	this.VlanCTag = vlanCTag
	this.VlanSTag = vlanSTag
	return &this
}

// NewLinkProtocolQinqWithDefaults instantiates a new LinkProtocolQinq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkProtocolQinqWithDefaults() *LinkProtocolQinq {
	this := LinkProtocolQinq{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LinkProtocolQinq) GetType() LinkProtocolType {
	if o == nil || IsNil(o.Type) {
		var ret LinkProtocolType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkProtocolQinq) GetTypeOk() (*LinkProtocolType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LinkProtocolQinq) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given LinkProtocolType and assigns it to the Type field.
func (o *LinkProtocolQinq) SetType(v LinkProtocolType) {
	o.Type = &v
}

// GetInnerTagProtocolId returns the InnerTagProtocolId field value
func (o *LinkProtocolQinq) GetInnerTagProtocolId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InnerTagProtocolId
}

// GetInnerTagProtocolIdOk returns a tuple with the InnerTagProtocolId field value
// and a boolean to check if the value has been set.
func (o *LinkProtocolQinq) GetInnerTagProtocolIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InnerTagProtocolId, true
}

// SetInnerTagProtocolId sets field value
func (o *LinkProtocolQinq) SetInnerTagProtocolId(v int32) {
	o.InnerTagProtocolId = v
}

// GetOuterTagProtocolId returns the OuterTagProtocolId field value
func (o *LinkProtocolQinq) GetOuterTagProtocolId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OuterTagProtocolId
}

// GetOuterTagProtocolIdOk returns a tuple with the OuterTagProtocolId field value
// and a boolean to check if the value has been set.
func (o *LinkProtocolQinq) GetOuterTagProtocolIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OuterTagProtocolId, true
}

// SetOuterTagProtocolId sets field value
func (o *LinkProtocolQinq) SetOuterTagProtocolId(v int32) {
	o.OuterTagProtocolId = v
}

// GetVlanCTag returns the VlanCTag field value
func (o *LinkProtocolQinq) GetVlanCTag() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VlanCTag
}

// GetVlanCTagOk returns a tuple with the VlanCTag field value
// and a boolean to check if the value has been set.
func (o *LinkProtocolQinq) GetVlanCTagOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VlanCTag, true
}

// SetVlanCTag sets field value
func (o *LinkProtocolQinq) SetVlanCTag(v int32) {
	o.VlanCTag = v
}

// GetVlanSTag returns the VlanSTag field value
func (o *LinkProtocolQinq) GetVlanSTag() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VlanSTag
}

// GetVlanSTagOk returns a tuple with the VlanSTag field value
// and a boolean to check if the value has been set.
func (o *LinkProtocolQinq) GetVlanSTagOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VlanSTag, true
}

// SetVlanSTag sets field value
func (o *LinkProtocolQinq) SetVlanSTag(v int32) {
	o.VlanSTag = v
}

// GetVlanCTagMin returns the VlanCTagMin field value if set, zero value otherwise.
func (o *LinkProtocolQinq) GetVlanCTagMin() int32 {
	if o == nil || IsNil(o.VlanCTagMin) {
		var ret int32
		return ret
	}
	return *o.VlanCTagMin
}

// GetVlanCTagMinOk returns a tuple with the VlanCTagMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkProtocolQinq) GetVlanCTagMinOk() (*int32, bool) {
	if o == nil || IsNil(o.VlanCTagMin) {
		return nil, false
	}
	return o.VlanCTagMin, true
}

// HasVlanCTagMin returns a boolean if a field has been set.
func (o *LinkProtocolQinq) HasVlanCTagMin() bool {
	if o != nil && !IsNil(o.VlanCTagMin) {
		return true
	}

	return false
}

// SetVlanCTagMin gets a reference to the given int32 and assigns it to the VlanCTagMin field.
func (o *LinkProtocolQinq) SetVlanCTagMin(v int32) {
	o.VlanCTagMin = &v
}

// GetVlanCTagMax returns the VlanCTagMax field value if set, zero value otherwise.
func (o *LinkProtocolQinq) GetVlanCTagMax() int32 {
	if o == nil || IsNil(o.VlanCTagMax) {
		var ret int32
		return ret
	}
	return *o.VlanCTagMax
}

// GetVlanCTagMaxOk returns a tuple with the VlanCTagMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkProtocolQinq) GetVlanCTagMaxOk() (*int32, bool) {
	if o == nil || IsNil(o.VlanCTagMax) {
		return nil, false
	}
	return o.VlanCTagMax, true
}

// HasVlanCTagMax returns a boolean if a field has been set.
func (o *LinkProtocolQinq) HasVlanCTagMax() bool {
	if o != nil && !IsNil(o.VlanCTagMax) {
		return true
	}

	return false
}

// SetVlanCTagMax gets a reference to the given int32 and assigns it to the VlanCTagMax field.
func (o *LinkProtocolQinq) SetVlanCTagMax(v int32) {
	o.VlanCTagMax = &v
}

// GetSubInterface returns the SubInterface field value if set, zero value otherwise.
func (o *LinkProtocolQinq) GetSubInterface() int32 {
	if o == nil || IsNil(o.SubInterface) {
		var ret int32
		return ret
	}
	return *o.SubInterface
}

// GetSubInterfaceOk returns a tuple with the SubInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkProtocolQinq) GetSubInterfaceOk() (*int32, bool) {
	if o == nil || IsNil(o.SubInterface) {
		return nil, false
	}
	return o.SubInterface, true
}

// HasSubInterface returns a boolean if a field has been set.
func (o *LinkProtocolQinq) HasSubInterface() bool {
	if o != nil && !IsNil(o.SubInterface) {
		return true
	}

	return false
}

// SetSubInterface gets a reference to the given int32 and assigns it to the SubInterface field.
func (o *LinkProtocolQinq) SetSubInterface(v int32) {
	o.SubInterface = &v
}

func (o LinkProtocolQinq) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinkProtocolQinq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["innerTagProtocolId"] = o.InnerTagProtocolId
	toSerialize["outerTagProtocolId"] = o.OuterTagProtocolId
	toSerialize["vlanCTag"] = o.VlanCTag
	toSerialize["vlanSTag"] = o.VlanSTag
	if !IsNil(o.VlanCTagMin) {
		toSerialize["vlanCTagMin"] = o.VlanCTagMin
	}
	if !IsNil(o.VlanCTagMax) {
		toSerialize["vlanCTagMax"] = o.VlanCTagMax
	}
	if !IsNil(o.SubInterface) {
		toSerialize["subInterface"] = o.SubInterface
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LinkProtocolQinq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"innerTagProtocolId",
		"outerTagProtocolId",
		"vlanCTag",
		"vlanSTag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLinkProtocolQinq := _LinkProtocolQinq{}

	err = json.Unmarshal(data, &varLinkProtocolQinq)

	if err != nil {
		return err
	}

	*o = LinkProtocolQinq(varLinkProtocolQinq)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "innerTagProtocolId")
		delete(additionalProperties, "outerTagProtocolId")
		delete(additionalProperties, "vlanCTag")
		delete(additionalProperties, "vlanSTag")
		delete(additionalProperties, "vlanCTagMin")
		delete(additionalProperties, "vlanCTagMax")
		delete(additionalProperties, "subInterface")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLinkProtocolQinq struct {
	value *LinkProtocolQinq
	isSet bool
}

func (v NullableLinkProtocolQinq) Get() *LinkProtocolQinq {
	return v.value
}

func (v *NullableLinkProtocolQinq) Set(val *LinkProtocolQinq) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkProtocolQinq) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkProtocolQinq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkProtocolQinq(val *LinkProtocolQinq) *NullableLinkProtocolQinq {
	return &NullableLinkProtocolQinq{value: val, isSet: true}
}

func (v NullableLinkProtocolQinq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkProtocolQinq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
