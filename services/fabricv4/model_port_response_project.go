/*
Equinix Fabric API v4

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the PortResponseProject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortResponseProject{}

// PortResponseProject struct for PortResponseProject
type PortResponseProject struct {
	// Subscriber-assigned project ID
	ProjectId            *string `json:"projectId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PortResponseProject PortResponseProject

// NewPortResponseProject instantiates a new PortResponseProject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortResponseProject() *PortResponseProject {
	this := PortResponseProject{}
	return &this
}

// NewPortResponseProjectWithDefaults instantiates a new PortResponseProject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortResponseProjectWithDefaults() *PortResponseProject {
	this := PortResponseProject{}
	return &this
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *PortResponseProject) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortResponseProject) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *PortResponseProject) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *PortResponseProject) SetProjectId(v string) {
	o.ProjectId = &v
}

func (o PortResponseProject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortResponseProject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PortResponseProject) UnmarshalJSON(data []byte) (err error) {
	varPortResponseProject := _PortResponseProject{}

	err = json.Unmarshal(data, &varPortResponseProject)

	if err != nil {
		return err
	}

	*o = PortResponseProject(varPortResponseProject)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "projectId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePortResponseProject struct {
	value *PortResponseProject
	isSet bool
}

func (v NullablePortResponseProject) Get() *PortResponseProject {
	return v.value
}

func (v *NullablePortResponseProject) Set(val *PortResponseProject) {
	v.value = val
	v.isSet = true
}

func (v NullablePortResponseProject) IsSet() bool {
	return v.isSet
}

func (v *NullablePortResponseProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortResponseProject(val *PortResponseProject) *NullablePortResponseProject {
	return &NullablePortResponseProject{value: val, isSet: true}
}

func (v NullablePortResponseProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortResponseProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
