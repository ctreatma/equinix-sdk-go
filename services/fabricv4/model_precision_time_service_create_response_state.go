/*
Equinix Fabric API v4

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// PrecisionTimeServiceCreateResponseState indicate service state
type PrecisionTimeServiceCreateResponseState string

// List of precisionTimeServiceCreateResponse_state
const (
	PRECISIONTIMESERVICECREATERESPONSESTATE_PROVISIONED           PrecisionTimeServiceCreateResponseState = "PROVISIONED"
	PRECISIONTIMESERVICECREATERESPONSESTATE_PROVISIONING          PrecisionTimeServiceCreateResponseState = "PROVISIONING"
	PRECISIONTIMESERVICECREATERESPONSESTATE_PROVISIONING_FAILED   PrecisionTimeServiceCreateResponseState = "PROVISIONING_FAILED"
	PRECISIONTIMESERVICECREATERESPONSESTATE_CONFIGURING           PrecisionTimeServiceCreateResponseState = "CONFIGURING"
	PRECISIONTIMESERVICECREATERESPONSESTATE_CANCELLED             PrecisionTimeServiceCreateResponseState = "CANCELLED"
	PRECISIONTIMESERVICECREATERESPONSESTATE_DEPROVISIONING_FAILED PrecisionTimeServiceCreateResponseState = "DEPROVISIONING_FAILED"
	PRECISIONTIMESERVICECREATERESPONSESTATE_PENDING_CONFIGURATION PrecisionTimeServiceCreateResponseState = "PENDING_CONFIGURATION"
	PRECISIONTIMESERVICECREATERESPONSESTATE_DEPROVISIONED         PrecisionTimeServiceCreateResponseState = "DEPROVISIONED"
	PRECISIONTIMESERVICECREATERESPONSESTATE_CONFIGURING_FAILED    PrecisionTimeServiceCreateResponseState = "CONFIGURING_FAILED"
	PRECISIONTIMESERVICECREATERESPONSESTATE_DEPROVISIONING        PrecisionTimeServiceCreateResponseState = "DEPROVISIONING"
)

// All allowed values of PrecisionTimeServiceCreateResponseState enum
var AllowedPrecisionTimeServiceCreateResponseStateEnumValues = []PrecisionTimeServiceCreateResponseState{
	"PROVISIONED",
	"PROVISIONING",
	"PROVISIONING_FAILED",
	"CONFIGURING",
	"CANCELLED",
	"DEPROVISIONING_FAILED",
	"PENDING_CONFIGURATION",
	"DEPROVISIONED",
	"CONFIGURING_FAILED",
	"DEPROVISIONING",
}

func (v *PrecisionTimeServiceCreateResponseState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PrecisionTimeServiceCreateResponseState(value)
	for _, existing := range AllowedPrecisionTimeServiceCreateResponseStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PrecisionTimeServiceCreateResponseState", value)
}

// NewPrecisionTimeServiceCreateResponseStateFromValue returns a pointer to a valid PrecisionTimeServiceCreateResponseState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrecisionTimeServiceCreateResponseStateFromValue(v string) (*PrecisionTimeServiceCreateResponseState, error) {
	ev := PrecisionTimeServiceCreateResponseState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PrecisionTimeServiceCreateResponseState: valid values are %v", v, AllowedPrecisionTimeServiceCreateResponseStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrecisionTimeServiceCreateResponseState) IsValid() bool {
	for _, existing := range AllowedPrecisionTimeServiceCreateResponseStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to precisionTimeServiceCreateResponse_state value
func (v PrecisionTimeServiceCreateResponseState) Ptr() *PrecisionTimeServiceCreateResponseState {
	return &v
}

type NullablePrecisionTimeServiceCreateResponseState struct {
	value *PrecisionTimeServiceCreateResponseState
	isSet bool
}

func (v NullablePrecisionTimeServiceCreateResponseState) Get() *PrecisionTimeServiceCreateResponseState {
	return v.value
}

func (v *NullablePrecisionTimeServiceCreateResponseState) Set(val *PrecisionTimeServiceCreateResponseState) {
	v.value = val
	v.isSet = true
}

func (v NullablePrecisionTimeServiceCreateResponseState) IsSet() bool {
	return v.isSet
}

func (v *NullablePrecisionTimeServiceCreateResponseState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrecisionTimeServiceCreateResponseState(val *PrecisionTimeServiceCreateResponseState) *NullablePrecisionTimeServiceCreateResponseState {
	return &NullablePrecisionTimeServiceCreateResponseState{value: val, isSet: true}
}

func (v NullablePrecisionTimeServiceCreateResponseState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrecisionTimeServiceCreateResponseState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
