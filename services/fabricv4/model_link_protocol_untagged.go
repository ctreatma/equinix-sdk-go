/*
Equinix Fabric API v4

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the LinkProtocolUntagged type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinkProtocolUntagged{}

// LinkProtocolUntagged Connection link protocol configuration - UNTAGGED
type LinkProtocolUntagged struct {
	Type                 *LinkProtocolType           `json:"type,omitempty"`
	Ipv4                 *LinkProtocolIpv4Ipv6Config `json:"ipv4,omitempty"`
	Ipv6                 *LinkProtocolIpv4Ipv6Config `json:"ipv6,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LinkProtocolUntagged LinkProtocolUntagged

// NewLinkProtocolUntagged instantiates a new LinkProtocolUntagged object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkProtocolUntagged() *LinkProtocolUntagged {
	this := LinkProtocolUntagged{}
	return &this
}

// NewLinkProtocolUntaggedWithDefaults instantiates a new LinkProtocolUntagged object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkProtocolUntaggedWithDefaults() *LinkProtocolUntagged {
	this := LinkProtocolUntagged{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LinkProtocolUntagged) GetType() LinkProtocolType {
	if o == nil || IsNil(o.Type) {
		var ret LinkProtocolType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkProtocolUntagged) GetTypeOk() (*LinkProtocolType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LinkProtocolUntagged) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given LinkProtocolType and assigns it to the Type field.
func (o *LinkProtocolUntagged) SetType(v LinkProtocolType) {
	o.Type = &v
}

// GetIpv4 returns the Ipv4 field value if set, zero value otherwise.
func (o *LinkProtocolUntagged) GetIpv4() LinkProtocolIpv4Ipv6Config {
	if o == nil || IsNil(o.Ipv4) {
		var ret LinkProtocolIpv4Ipv6Config
		return ret
	}
	return *o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkProtocolUntagged) GetIpv4Ok() (*LinkProtocolIpv4Ipv6Config, bool) {
	if o == nil || IsNil(o.Ipv4) {
		return nil, false
	}
	return o.Ipv4, true
}

// HasIpv4 returns a boolean if a field has been set.
func (o *LinkProtocolUntagged) HasIpv4() bool {
	if o != nil && !IsNil(o.Ipv4) {
		return true
	}

	return false
}

// SetIpv4 gets a reference to the given LinkProtocolIpv4Ipv6Config and assigns it to the Ipv4 field.
func (o *LinkProtocolUntagged) SetIpv4(v LinkProtocolIpv4Ipv6Config) {
	o.Ipv4 = &v
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise.
func (o *LinkProtocolUntagged) GetIpv6() LinkProtocolIpv4Ipv6Config {
	if o == nil || IsNil(o.Ipv6) {
		var ret LinkProtocolIpv4Ipv6Config
		return ret
	}
	return *o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkProtocolUntagged) GetIpv6Ok() (*LinkProtocolIpv4Ipv6Config, bool) {
	if o == nil || IsNil(o.Ipv6) {
		return nil, false
	}
	return o.Ipv6, true
}

// HasIpv6 returns a boolean if a field has been set.
func (o *LinkProtocolUntagged) HasIpv6() bool {
	if o != nil && !IsNil(o.Ipv6) {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given LinkProtocolIpv4Ipv6Config and assigns it to the Ipv6 field.
func (o *LinkProtocolUntagged) SetIpv6(v LinkProtocolIpv4Ipv6Config) {
	o.Ipv6 = &v
}

func (o LinkProtocolUntagged) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinkProtocolUntagged) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Ipv4) {
		toSerialize["ipv4"] = o.Ipv4
	}
	if !IsNil(o.Ipv6) {
		toSerialize["ipv6"] = o.Ipv6
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LinkProtocolUntagged) UnmarshalJSON(data []byte) (err error) {
	varLinkProtocolUntagged := _LinkProtocolUntagged{}

	err = json.Unmarshal(data, &varLinkProtocolUntagged)

	if err != nil {
		return err
	}

	*o = LinkProtocolUntagged(varLinkProtocolUntagged)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "ipv4")
		delete(additionalProperties, "ipv6")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLinkProtocolUntagged struct {
	value *LinkProtocolUntagged
	isSet bool
}

func (v NullableLinkProtocolUntagged) Get() *LinkProtocolUntagged {
	return v.value
}

func (v *NullableLinkProtocolUntagged) Set(val *LinkProtocolUntagged) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkProtocolUntagged) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkProtocolUntagged) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkProtocolUntagged(val *LinkProtocolUntagged) *NullableLinkProtocolUntagged {
	return &NullableLinkProtocolUntagged{value: val, isSet: true}
}

func (v NullableLinkProtocolUntagged) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkProtocolUntagged) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
