/*
Equinix Fabric API v4

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the Account type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Account{}

// Account Account model, includes account number and flag to indicate if this account is reseller
type Account struct {
	AccountNumber        int32   `json:"accountNumber"`
	IsResellerAccount    *bool   `json:"isResellerAccount,omitempty"`
	OrgId                *string `json:"orgId,omitempty"`
	GlobalOrgId          *string `json:"globalOrgId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Account Account

// NewAccount instantiates a new Account object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccount(accountNumber int32) *Account {
	this := Account{}
	this.AccountNumber = accountNumber
	return &this
}

// NewAccountWithDefaults instantiates a new Account object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountWithDefaults() *Account {
	this := Account{}
	return &this
}

// GetAccountNumber returns the AccountNumber field value
func (o *Account) GetAccountNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value
// and a boolean to check if the value has been set.
func (o *Account) GetAccountNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountNumber, true
}

// SetAccountNumber sets field value
func (o *Account) SetAccountNumber(v int32) {
	o.AccountNumber = v
}

// GetIsResellerAccount returns the IsResellerAccount field value if set, zero value otherwise.
func (o *Account) GetIsResellerAccount() bool {
	if o == nil || IsNil(o.IsResellerAccount) {
		var ret bool
		return ret
	}
	return *o.IsResellerAccount
}

// GetIsResellerAccountOk returns a tuple with the IsResellerAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetIsResellerAccountOk() (*bool, bool) {
	if o == nil || IsNil(o.IsResellerAccount) {
		return nil, false
	}
	return o.IsResellerAccount, true
}

// HasIsResellerAccount returns a boolean if a field has been set.
func (o *Account) HasIsResellerAccount() bool {
	if o != nil && !IsNil(o.IsResellerAccount) {
		return true
	}

	return false
}

// SetIsResellerAccount gets a reference to the given bool and assigns it to the IsResellerAccount field.
func (o *Account) SetIsResellerAccount(v bool) {
	o.IsResellerAccount = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *Account) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *Account) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *Account) SetOrgId(v string) {
	o.OrgId = &v
}

// GetGlobalOrgId returns the GlobalOrgId field value if set, zero value otherwise.
func (o *Account) GetGlobalOrgId() string {
	if o == nil || IsNil(o.GlobalOrgId) {
		var ret string
		return ret
	}
	return *o.GlobalOrgId
}

// GetGlobalOrgIdOk returns a tuple with the GlobalOrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetGlobalOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.GlobalOrgId) {
		return nil, false
	}
	return o.GlobalOrgId, true
}

// HasGlobalOrgId returns a boolean if a field has been set.
func (o *Account) HasGlobalOrgId() bool {
	if o != nil && !IsNil(o.GlobalOrgId) {
		return true
	}

	return false
}

// SetGlobalOrgId gets a reference to the given string and assigns it to the GlobalOrgId field.
func (o *Account) SetGlobalOrgId(v string) {
	o.GlobalOrgId = &v
}

func (o Account) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Account) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accountNumber"] = o.AccountNumber
	if !IsNil(o.IsResellerAccount) {
		toSerialize["isResellerAccount"] = o.IsResellerAccount
	}
	if !IsNil(o.OrgId) {
		toSerialize["orgId"] = o.OrgId
	}
	if !IsNil(o.GlobalOrgId) {
		toSerialize["globalOrgId"] = o.GlobalOrgId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Account) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accountNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccount := _Account{}

	err = json.Unmarshal(data, &varAccount)

	if err != nil {
		return err
	}

	*o = Account(varAccount)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accountNumber")
		delete(additionalProperties, "isResellerAccount")
		delete(additionalProperties, "orgId")
		delete(additionalProperties, "globalOrgId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccount struct {
	value *Account
	isSet bool
}

func (v NullableAccount) Get() *Account {
	return v.value
}

func (v *NullableAccount) Set(val *Account) {
	v.value = val
	v.isSet = true
}

func (v NullableAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccount(val *Account) *NullableAccount {
	return &NullableAccount{value: val, isSet: true}
}

func (v NullableAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
