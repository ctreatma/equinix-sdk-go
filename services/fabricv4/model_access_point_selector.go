/*
Equinix Fabric API v4

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the AccessPointSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessPointSelector{}

// AccessPointSelector List of criteria for selecting network access points with optimal efficiency, security, compatibility, and availability.
type AccessPointSelector struct {
	Type                 *AccessPointSelectorType  `json:"type,omitempty"`
	Port                 *SimplifiedMetadataEntity `json:"port,omitempty"`
	LinkProtocol         *LinkProtocol             `json:"linkProtocol,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AccessPointSelector AccessPointSelector

// NewAccessPointSelector instantiates a new AccessPointSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessPointSelector() *AccessPointSelector {
	this := AccessPointSelector{}
	return &this
}

// NewAccessPointSelectorWithDefaults instantiates a new AccessPointSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessPointSelectorWithDefaults() *AccessPointSelector {
	this := AccessPointSelector{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AccessPointSelector) GetType() AccessPointSelectorType {
	if o == nil || IsNil(o.Type) {
		var ret AccessPointSelectorType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPointSelector) GetTypeOk() (*AccessPointSelectorType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AccessPointSelector) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given AccessPointSelectorType and assigns it to the Type field.
func (o *AccessPointSelector) SetType(v AccessPointSelectorType) {
	o.Type = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *AccessPointSelector) GetPort() SimplifiedMetadataEntity {
	if o == nil || IsNil(o.Port) {
		var ret SimplifiedMetadataEntity
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPointSelector) GetPortOk() (*SimplifiedMetadataEntity, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *AccessPointSelector) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given SimplifiedMetadataEntity and assigns it to the Port field.
func (o *AccessPointSelector) SetPort(v SimplifiedMetadataEntity) {
	o.Port = &v
}

// GetLinkProtocol returns the LinkProtocol field value if set, zero value otherwise.
func (o *AccessPointSelector) GetLinkProtocol() LinkProtocol {
	if o == nil || IsNil(o.LinkProtocol) {
		var ret LinkProtocol
		return ret
	}
	return *o.LinkProtocol
}

// GetLinkProtocolOk returns a tuple with the LinkProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPointSelector) GetLinkProtocolOk() (*LinkProtocol, bool) {
	if o == nil || IsNil(o.LinkProtocol) {
		return nil, false
	}
	return o.LinkProtocol, true
}

// HasLinkProtocol returns a boolean if a field has been set.
func (o *AccessPointSelector) HasLinkProtocol() bool {
	if o != nil && !IsNil(o.LinkProtocol) {
		return true
	}

	return false
}

// SetLinkProtocol gets a reference to the given LinkProtocol and assigns it to the LinkProtocol field.
func (o *AccessPointSelector) SetLinkProtocol(v LinkProtocol) {
	o.LinkProtocol = &v
}

func (o AccessPointSelector) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessPointSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.LinkProtocol) {
		toSerialize["linkProtocol"] = o.LinkProtocol
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccessPointSelector) UnmarshalJSON(data []byte) (err error) {
	varAccessPointSelector := _AccessPointSelector{}

	err = json.Unmarshal(data, &varAccessPointSelector)

	if err != nil {
		return err
	}

	*o = AccessPointSelector(varAccessPointSelector)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "port")
		delete(additionalProperties, "linkProtocol")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccessPointSelector struct {
	value *AccessPointSelector
	isSet bool
}

func (v NullableAccessPointSelector) Get() *AccessPointSelector {
	return v.value
}

func (v *NullableAccessPointSelector) Set(val *AccessPointSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessPointSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessPointSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessPointSelector(val *AccessPointSelector) *NullableAccessPointSelector {
	return &NullableAccessPointSelector{value: val, isSet: true}
}

func (v NullableAccessPointSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessPointSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
