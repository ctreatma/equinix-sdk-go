/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

API version: 2.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// OrderPurchaseOrderAllOfType the model 'OrderPurchaseOrderAllOfType'
type OrderPurchaseOrderAllOfType string

// List of OrderPurchaseOrder_allOf_type
const (
	ORDERPURCHASEORDERALLOFTYPE_STANDARD_PURCHASE_ORDER OrderPurchaseOrderAllOfType = "STANDARD_PURCHASE_ORDER"
	ORDERPURCHASEORDERALLOFTYPE_BLANKET_PURCHASE_ORDER  OrderPurchaseOrderAllOfType = "BLANKET_PURCHASE_ORDER"
)

// All allowed values of OrderPurchaseOrderAllOfType enum
var AllowedOrderPurchaseOrderAllOfTypeEnumValues = []OrderPurchaseOrderAllOfType{
	"STANDARD_PURCHASE_ORDER",
	"BLANKET_PURCHASE_ORDER",
}

func (v *OrderPurchaseOrderAllOfType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderPurchaseOrderAllOfType(value)
	for _, existing := range AllowedOrderPurchaseOrderAllOfTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderPurchaseOrderAllOfType", value)
}

// NewOrderPurchaseOrderAllOfTypeFromValue returns a pointer to a valid OrderPurchaseOrderAllOfType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderPurchaseOrderAllOfTypeFromValue(v string) (*OrderPurchaseOrderAllOfType, error) {
	ev := OrderPurchaseOrderAllOfType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderPurchaseOrderAllOfType: valid values are %v", v, AllowedOrderPurchaseOrderAllOfTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderPurchaseOrderAllOfType) IsValid() bool {
	for _, existing := range AllowedOrderPurchaseOrderAllOfTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderPurchaseOrder_allOf_type value
func (v OrderPurchaseOrderAllOfType) Ptr() *OrderPurchaseOrderAllOfType {
	return &v
}

type NullableOrderPurchaseOrderAllOfType struct {
	value *OrderPurchaseOrderAllOfType
	isSet bool
}

func (v NullableOrderPurchaseOrderAllOfType) Get() *OrderPurchaseOrderAllOfType {
	return v.value
}

func (v *NullableOrderPurchaseOrderAllOfType) Set(val *OrderPurchaseOrderAllOfType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderPurchaseOrderAllOfType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderPurchaseOrderAllOfType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderPurchaseOrderAllOfType(val *OrderPurchaseOrderAllOfType) *NullableOrderPurchaseOrderAllOfType {
	return &NullableOrderPurchaseOrderAllOfType{value: val, isSet: true}
}

func (v NullableOrderPurchaseOrderAllOfType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderPurchaseOrderAllOfType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
