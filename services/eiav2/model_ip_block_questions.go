/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

API version: 2.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// checks if the IpBlockQuestions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpBlockQuestions{}

// IpBlockQuestions struct for IpBlockQuestions
type IpBlockQuestions struct {
	Type                 IpBlockQuestionsType   `json:"type"`
	Answer               IpBlockQuestionsAnswer `json:"answer"`
	AdditionalProperties map[string]interface{}
}

type _IpBlockQuestions IpBlockQuestions

// NewIpBlockQuestions instantiates a new IpBlockQuestions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpBlockQuestions(type_ IpBlockQuestionsType, answer IpBlockQuestionsAnswer) *IpBlockQuestions {
	this := IpBlockQuestions{}
	this.Type = type_
	this.Answer = answer
	return &this
}

// NewIpBlockQuestionsWithDefaults instantiates a new IpBlockQuestions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpBlockQuestionsWithDefaults() *IpBlockQuestions {
	this := IpBlockQuestions{}
	return &this
}

// GetType returns the Type field value
func (o *IpBlockQuestions) GetType() IpBlockQuestionsType {
	if o == nil {
		var ret IpBlockQuestionsType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *IpBlockQuestions) GetTypeOk() (*IpBlockQuestionsType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *IpBlockQuestions) SetType(v IpBlockQuestionsType) {
	o.Type = v
}

// GetAnswer returns the Answer field value
func (o *IpBlockQuestions) GetAnswer() IpBlockQuestionsAnswer {
	if o == nil {
		var ret IpBlockQuestionsAnswer
		return ret
	}

	return o.Answer
}

// GetAnswerOk returns a tuple with the Answer field value
// and a boolean to check if the value has been set.
func (o *IpBlockQuestions) GetAnswerOk() (*IpBlockQuestionsAnswer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Answer, true
}

// SetAnswer sets field value
func (o *IpBlockQuestions) SetAnswer(v IpBlockQuestionsAnswer) {
	o.Answer = v
}

func (o IpBlockQuestions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpBlockQuestions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["answer"] = o.Answer

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IpBlockQuestions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"answer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIpBlockQuestions := _IpBlockQuestions{}

	err = json.Unmarshal(data, &varIpBlockQuestions)

	if err != nil {
		return err
	}

	*o = IpBlockQuestions(varIpBlockQuestions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "answer")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIpBlockQuestions struct {
	value *IpBlockQuestions
	isSet bool
}

func (v NullableIpBlockQuestions) Get() *IpBlockQuestions {
	return v.value
}

func (v *NullableIpBlockQuestions) Set(val *IpBlockQuestions) {
	v.value = val
	v.isSet = true
}

func (v NullableIpBlockQuestions) IsSet() bool {
	return v.isSet
}

func (v *NullableIpBlockQuestions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpBlockQuestions(val *IpBlockQuestions) *NullableIpBlockQuestions {
	return &NullableIpBlockQuestions{value: val, isSet: true}
}

func (v NullableIpBlockQuestions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpBlockQuestions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
