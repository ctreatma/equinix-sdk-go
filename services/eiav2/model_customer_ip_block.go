/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

API version: 2.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// checks if the CustomerIpBlock type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerIpBlock{}

// CustomerIpBlock struct for CustomerIpBlock
type CustomerIpBlock struct {
	// The IPv6 routing prefix, sometimes called a subnet mask, is the network portion of an IP address. The prefix length is an integer between 1 and 128 (inclusive) that represents the number of bits set to 1, such as /24 or /60.
	PrefixLength         int32 `json:"prefixLength"`
	AdditionalProperties map[string]interface{}
}

type _CustomerIpBlock CustomerIpBlock

// NewCustomerIpBlock instantiates a new CustomerIpBlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerIpBlock(prefixLength int32) *CustomerIpBlock {
	this := CustomerIpBlock{}
	this.PrefixLength = prefixLength
	return &this
}

// NewCustomerIpBlockWithDefaults instantiates a new CustomerIpBlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerIpBlockWithDefaults() *CustomerIpBlock {
	this := CustomerIpBlock{}
	return &this
}

// GetPrefixLength returns the PrefixLength field value
func (o *CustomerIpBlock) GetPrefixLength() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PrefixLength
}

// GetPrefixLengthOk returns a tuple with the PrefixLength field value
// and a boolean to check if the value has been set.
func (o *CustomerIpBlock) GetPrefixLengthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrefixLength, true
}

// SetPrefixLength sets field value
func (o *CustomerIpBlock) SetPrefixLength(v int32) {
	o.PrefixLength = v
}

func (o CustomerIpBlock) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerIpBlock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["prefixLength"] = o.PrefixLength

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CustomerIpBlock) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"prefixLength",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomerIpBlock := _CustomerIpBlock{}

	err = json.Unmarshal(data, &varCustomerIpBlock)

	if err != nil {
		return err
	}

	*o = CustomerIpBlock(varCustomerIpBlock)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "prefixLength")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCustomerIpBlock struct {
	value *CustomerIpBlock
	isSet bool
}

func (v NullableCustomerIpBlock) Get() *CustomerIpBlock {
	return v.value
}

func (v *NullableCustomerIpBlock) Set(val *CustomerIpBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerIpBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerIpBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerIpBlock(val *CustomerIpBlock) *NullableCustomerIpBlock {
	return &NullableCustomerIpBlock{value: val, isSet: true}
}

func (v NullableCustomerIpBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerIpBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
