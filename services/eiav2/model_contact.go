/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

API version: 2.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// checks if the Contact type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Contact{}

// Contact struct for Contact
type Contact struct {
	Href string      `json:"href"`
	Type ContactType `json:"type"`
	// Identifies (e.g., userName) a registered user. If a registered user is specified, then firstName/lastName need not be provided
	RegisteredUser       string `json:"registeredUser"`
	AdditionalProperties map[string]interface{}
}

type _Contact Contact

// NewContact instantiates a new Contact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContact(href string, type_ ContactType, registeredUser string) *Contact {
	this := Contact{}
	this.Href = href
	this.Type = type_
	this.RegisteredUser = registeredUser
	return &this
}

// NewContactWithDefaults instantiates a new Contact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactWithDefaults() *Contact {
	this := Contact{}
	return &this
}

// GetHref returns the Href field value
func (o *Contact) GetHref() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Href
}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
func (o *Contact) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Href, true
}

// SetHref sets field value
func (o *Contact) SetHref(v string) {
	o.Href = v
}

// GetType returns the Type field value
func (o *Contact) GetType() ContactType {
	if o == nil {
		var ret ContactType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Contact) GetTypeOk() (*ContactType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Contact) SetType(v ContactType) {
	o.Type = v
}

// GetRegisteredUser returns the RegisteredUser field value
func (o *Contact) GetRegisteredUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegisteredUser
}

// GetRegisteredUserOk returns a tuple with the RegisteredUser field value
// and a boolean to check if the value has been set.
func (o *Contact) GetRegisteredUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegisteredUser, true
}

// SetRegisteredUser sets field value
func (o *Contact) SetRegisteredUser(v string) {
	o.RegisteredUser = v
}

func (o Contact) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Contact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["href"] = o.Href
	toSerialize["type"] = o.Type
	toSerialize["registeredUser"] = o.RegisteredUser

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Contact) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"href",
		"type",
		"registeredUser",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContact := _Contact{}

	err = json.Unmarshal(data, &varContact)

	if err != nil {
		return err
	}

	*o = Contact(varContact)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "type")
		delete(additionalProperties, "registeredUser")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableContact struct {
	value *Contact
	isSet bool
}

func (v NullableContact) Get() *Contact {
	return v.value
}

func (v *NullableContact) Set(val *Contact) {
	v.value = val
	v.isSet = true
}

func (v NullableContact) IsSet() bool {
	return v.isSet
}

func (v *NullableContact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContact(val *Contact) *NullableContact {
	return &NullableContact{value: val, isSet: true}
}

func (v NullableContact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
