/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// checks if the Service type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Service{}

// Service struct for Service
type Service struct {
	Tags    []string    `json:"tags,omitempty"`
	Type    ServiceType `json:"type"`
	UseCase UseCaseType `json:"useCase"`
	// Name of the service instance
	Name string `json:"name"`
	// Description of the service instance
	Description *string `json:"description,omitempty"`
	// Service bandwidth in Mbps
	Bandwidth int32 `json:"bandwidth"`
	// Service min bandwidth commit in Mbps
	MinBandwidthCommit   *int32                  `json:"minBandwidthCommit,omitempty"`
	Uuid                 string                  `json:"uuid"`
	Account              *CustomerBillingAccount `json:"account,omitempty"`
	Billing              BillingType             `json:"billing"`
	ChangeLog            *ServiceChangeLog       `json:"changeLog,omitempty"`
	Draft                bool                    `json:"draft"`
	Links                []Link                  `json:"links,omitempty"`
	Order                *ServiceOrderReference  `json:"order,omitempty"`
	Project              *ProjectReference       `json:"project,omitempty"`
	State                ServiceState            `json:"state"`
	AdditionalProperties map[string]interface{}
}

type _Service Service

// NewService instantiates a new Service object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewService(type_ ServiceType, useCase UseCaseType, name string, bandwidth int32, uuid string, billing BillingType, draft bool, state ServiceState) *Service {
	this := Service{}
	this.Type = type_
	this.UseCase = useCase
	this.Name = name
	this.Bandwidth = bandwidth
	this.Uuid = uuid
	this.Billing = billing
	this.Draft = draft
	this.State = state
	return &this
}

// NewServiceWithDefaults instantiates a new Service object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceWithDefaults() *Service {
	this := Service{}
	var billing BillingType = BILLINGTYPE_FIXED
	this.Billing = billing
	var draft bool = false
	this.Draft = draft
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Service) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Service) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Service) SetTags(v []string) {
	o.Tags = v
}

// GetType returns the Type field value
func (o *Service) GetType() ServiceType {
	if o == nil {
		var ret ServiceType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Service) GetTypeOk() (*ServiceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Service) SetType(v ServiceType) {
	o.Type = v
}

// GetUseCase returns the UseCase field value
func (o *Service) GetUseCase() UseCaseType {
	if o == nil {
		var ret UseCaseType
		return ret
	}

	return o.UseCase
}

// GetUseCaseOk returns a tuple with the UseCase field value
// and a boolean to check if the value has been set.
func (o *Service) GetUseCaseOk() (*UseCaseType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseCase, true
}

// SetUseCase sets field value
func (o *Service) SetUseCase(v UseCaseType) {
	o.UseCase = v
}

// GetName returns the Name field value
func (o *Service) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Service) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Service) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Service) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Service) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Service) SetDescription(v string) {
	o.Description = &v
}

// GetBandwidth returns the Bandwidth field value
func (o *Service) GetBandwidth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Bandwidth
}

// GetBandwidthOk returns a tuple with the Bandwidth field value
// and a boolean to check if the value has been set.
func (o *Service) GetBandwidthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bandwidth, true
}

// SetBandwidth sets field value
func (o *Service) SetBandwidth(v int32) {
	o.Bandwidth = v
}

// GetMinBandwidthCommit returns the MinBandwidthCommit field value if set, zero value otherwise.
func (o *Service) GetMinBandwidthCommit() int32 {
	if o == nil || IsNil(o.MinBandwidthCommit) {
		var ret int32
		return ret
	}
	return *o.MinBandwidthCommit
}

// GetMinBandwidthCommitOk returns a tuple with the MinBandwidthCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetMinBandwidthCommitOk() (*int32, bool) {
	if o == nil || IsNil(o.MinBandwidthCommit) {
		return nil, false
	}
	return o.MinBandwidthCommit, true
}

// HasMinBandwidthCommit returns a boolean if a field has been set.
func (o *Service) HasMinBandwidthCommit() bool {
	if o != nil && !IsNil(o.MinBandwidthCommit) {
		return true
	}

	return false
}

// SetMinBandwidthCommit gets a reference to the given int32 and assigns it to the MinBandwidthCommit field.
func (o *Service) SetMinBandwidthCommit(v int32) {
	o.MinBandwidthCommit = &v
}

// GetUuid returns the Uuid field value
func (o *Service) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *Service) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *Service) SetUuid(v string) {
	o.Uuid = v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *Service) GetAccount() CustomerBillingAccount {
	if o == nil || IsNil(o.Account) {
		var ret CustomerBillingAccount
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetAccountOk() (*CustomerBillingAccount, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *Service) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given CustomerBillingAccount and assigns it to the Account field.
func (o *Service) SetAccount(v CustomerBillingAccount) {
	o.Account = &v
}

// GetBilling returns the Billing field value
func (o *Service) GetBilling() BillingType {
	if o == nil {
		var ret BillingType
		return ret
	}

	return o.Billing
}

// GetBillingOk returns a tuple with the Billing field value
// and a boolean to check if the value has been set.
func (o *Service) GetBillingOk() (*BillingType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Billing, true
}

// SetBilling sets field value
func (o *Service) SetBilling(v BillingType) {
	o.Billing = v
}

// GetChangeLog returns the ChangeLog field value if set, zero value otherwise.
func (o *Service) GetChangeLog() ServiceChangeLog {
	if o == nil || IsNil(o.ChangeLog) {
		var ret ServiceChangeLog
		return ret
	}
	return *o.ChangeLog
}

// GetChangeLogOk returns a tuple with the ChangeLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetChangeLogOk() (*ServiceChangeLog, bool) {
	if o == nil || IsNil(o.ChangeLog) {
		return nil, false
	}
	return o.ChangeLog, true
}

// HasChangeLog returns a boolean if a field has been set.
func (o *Service) HasChangeLog() bool {
	if o != nil && !IsNil(o.ChangeLog) {
		return true
	}

	return false
}

// SetChangeLog gets a reference to the given ServiceChangeLog and assigns it to the ChangeLog field.
func (o *Service) SetChangeLog(v ServiceChangeLog) {
	o.ChangeLog = &v
}

// GetDraft returns the Draft field value
func (o *Service) GetDraft() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Draft
}

// GetDraftOk returns a tuple with the Draft field value
// and a boolean to check if the value has been set.
func (o *Service) GetDraftOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Draft, true
}

// SetDraft sets field value
func (o *Service) SetDraft(v bool) {
	o.Draft = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Service) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Service) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *Service) SetLinks(v []Link) {
	o.Links = v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *Service) GetOrder() ServiceOrderReference {
	if o == nil || IsNil(o.Order) {
		var ret ServiceOrderReference
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetOrderOk() (*ServiceOrderReference, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *Service) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given ServiceOrderReference and assigns it to the Order field.
func (o *Service) SetOrder(v ServiceOrderReference) {
	o.Order = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *Service) GetProject() ProjectReference {
	if o == nil || IsNil(o.Project) {
		var ret ProjectReference
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetProjectOk() (*ProjectReference, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *Service) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given ProjectReference and assigns it to the Project field.
func (o *Service) SetProject(v ProjectReference) {
	o.Project = &v
}

// GetState returns the State field value
func (o *Service) GetState() ServiceState {
	if o == nil {
		var ret ServiceState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Service) GetStateOk() (*ServiceState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Service) SetState(v ServiceState) {
	o.State = v
}

func (o Service) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Service) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["type"] = o.Type
	toSerialize["useCase"] = o.UseCase
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["bandwidth"] = o.Bandwidth
	if !IsNil(o.MinBandwidthCommit) {
		toSerialize["minBandwidthCommit"] = o.MinBandwidthCommit
	}
	toSerialize["uuid"] = o.Uuid
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	toSerialize["billing"] = o.Billing
	if !IsNil(o.ChangeLog) {
		toSerialize["changeLog"] = o.ChangeLog
	}
	toSerialize["draft"] = o.Draft
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	toSerialize["state"] = o.State

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Service) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"useCase",
		"name",
		"bandwidth",
		"uuid",
		"billing",
		"draft",
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varService := _Service{}

	err = json.Unmarshal(data, &varService)

	if err != nil {
		return err
	}

	*o = Service(varService)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tags")
		delete(additionalProperties, "type")
		delete(additionalProperties, "useCase")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "bandwidth")
		delete(additionalProperties, "minBandwidthCommit")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "account")
		delete(additionalProperties, "billing")
		delete(additionalProperties, "changeLog")
		delete(additionalProperties, "draft")
		delete(additionalProperties, "links")
		delete(additionalProperties, "order")
		delete(additionalProperties, "project")
		delete(additionalProperties, "state")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableService struct {
	value *Service
	isSet bool
}

func (v NullableService) Get() *Service {
	return v.value
}

func (v *NullableService) Set(val *Service) {
	v.value = val
	v.isSet = true
}

func (v NullableService) IsSet() bool {
	return v.isSet
}

func (v *NullableService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableService(val *Service) *NullableService {
	return &NullableService{value: val, isSet: true}
}

func (v NullableService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
