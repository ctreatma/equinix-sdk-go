/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

API version: 2.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// OrderState the model 'OrderState'
type OrderState string

// List of OrderState
const (
	ORDERSTATE_DRAFT              OrderState = "DRAFT"
	ORDERSTATE_PROCESSING         OrderState = "PROCESSING"
	ORDERSTATE_AWAITING_SIGNATURE OrderState = "AWAITING_SIGNATURE"
	ORDERSTATE_SIGNATURE_REJECTED OrderState = "SIGNATURE_REJECTED"
	ORDERSTATE_SIGNATURE_EXPIRED  OrderState = "SIGNATURE_EXPIRED"
	ORDERSTATE_COMPLETED          OrderState = "COMPLETED"
	ORDERSTATE_FAILED             OrderState = "FAILED"
)

// All allowed values of OrderState enum
var AllowedOrderStateEnumValues = []OrderState{
	"DRAFT",
	"PROCESSING",
	"AWAITING_SIGNATURE",
	"SIGNATURE_REJECTED",
	"SIGNATURE_EXPIRED",
	"COMPLETED",
	"FAILED",
}

func (v *OrderState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderState(value)
	for _, existing := range AllowedOrderStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderState", value)
}

// NewOrderStateFromValue returns a pointer to a valid OrderState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderStateFromValue(v string) (*OrderState, error) {
	ev := OrderState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderState: valid values are %v", v, AllowedOrderStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderState) IsValid() bool {
	for _, existing := range AllowedOrderStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderState value
func (v OrderState) Ptr() *OrderState {
	return &v
}

type NullableOrderState struct {
	value *OrderState
	isSet bool
}

func (v NullableOrderState) Get() *OrderState {
	return v.value
}

func (v *NullableOrderState) Set(val *OrderState) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderState) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderState(val *OrderState) *NullableOrderState {
	return &NullableOrderState{value: val, isSet: true}
}

func (v NullableOrderState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
