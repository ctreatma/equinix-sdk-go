/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// IpBlockReadModelType Determines the type of Routing Protocol
type IpBlockReadModelType string

// List of IpBlockReadModel_type
const (
	IPBLOCKREADMODELTYPE_IA_IP_BLOCK IpBlockReadModelType = "IA_IP_BLOCK"
)

// All allowed values of IpBlockReadModelType enum
var AllowedIpBlockReadModelTypeEnumValues = []IpBlockReadModelType{
	"IA_IP_BLOCK",
}

func (v *IpBlockReadModelType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IpBlockReadModelType(value)
	for _, existing := range AllowedIpBlockReadModelTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IpBlockReadModelType", value)
}

// NewIpBlockReadModelTypeFromValue returns a pointer to a valid IpBlockReadModelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIpBlockReadModelTypeFromValue(v string) (*IpBlockReadModelType, error) {
	ev := IpBlockReadModelType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IpBlockReadModelType: valid values are %v", v, AllowedIpBlockReadModelTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IpBlockReadModelType) IsValid() bool {
	for _, existing := range AllowedIpBlockReadModelTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IpBlockReadModel_type value
func (v IpBlockReadModelType) Ptr() *IpBlockReadModelType {
	return &v
}

type NullableIpBlockReadModelType struct {
	value *IpBlockReadModelType
	isSet bool
}

func (v NullableIpBlockReadModelType) Get() *IpBlockReadModelType {
	return v.value
}

func (v *NullableIpBlockReadModelType) Set(val *IpBlockReadModelType) {
	v.value = val
	v.isSet = true
}

func (v NullableIpBlockReadModelType) IsSet() bool {
	return v.isSet
}

func (v *NullableIpBlockReadModelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpBlockReadModelType(val *IpBlockReadModelType) *NullableIpBlockReadModelType {
	return &NullableIpBlockReadModelType{value: val, isSet: true}
}

func (v NullableIpBlockReadModelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpBlockReadModelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
