/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// ContactType the model 'ContactType'
type ContactType string

// List of ContactType
const (
	CONTACTTYPE_NOTIFICATION ContactType = "NOTIFICATION"
	CONTACTTYPE_TECHNICAL    ContactType = "TECHNICAL"
	CONTACTTYPE_ORDERING     ContactType = "ORDERING"
	CONTACTTYPE_RESELLING    ContactType = "RESELLING"
	CONTACTTYPE_BILLING      ContactType = "BILLING"
)

// All allowed values of ContactType enum
var AllowedContactTypeEnumValues = []ContactType{
	"NOTIFICATION",
	"TECHNICAL",
	"ORDERING",
	"RESELLING",
	"BILLING",
}

func (v *ContactType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContactType(value)
	for _, existing := range AllowedContactTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContactType", value)
}

// NewContactTypeFromValue returns a pointer to a valid ContactType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContactTypeFromValue(v string) (*ContactType, error) {
	ev := ContactType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContactType: valid values are %v", v, AllowedContactTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContactType) IsValid() bool {
	for _, existing := range AllowedContactTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContactType value
func (v ContactType) Ptr() *ContactType {
	return &v
}

type NullableContactType struct {
	value *ContactType
	isSet bool
}

func (v NullableContactType) Get() *ContactType {
	return v.value
}

func (v *NullableContactType) Set(val *ContactType) {
	v.value = val
	v.isSet = true
}

func (v NullableContactType) IsSet() bool {
	return v.isSet
}

func (v *NullableContactType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactType(val *ContactType) *NullableContactType {
	return &NullableContactType{value: val, isSet: true}
}

func (v NullableContactType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
