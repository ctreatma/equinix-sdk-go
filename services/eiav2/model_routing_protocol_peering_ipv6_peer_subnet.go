/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

API version: 2.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// checks if the RoutingProtocolPeeringIpv6PeerSubnet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutingProtocolPeeringIpv6PeerSubnet{}

// RoutingProtocolPeeringIpv6PeerSubnet struct for RoutingProtocolPeeringIpv6PeerSubnet
type RoutingProtocolPeeringIpv6PeerSubnet struct {
	// Subnet used for peering
	Prefix               string `json:"prefix"`
	PrefixLength         int32  `json:"prefixLength"`
	AdditionalProperties map[string]interface{}
}

type _RoutingProtocolPeeringIpv6PeerSubnet RoutingProtocolPeeringIpv6PeerSubnet

// NewRoutingProtocolPeeringIpv6PeerSubnet instantiates a new RoutingProtocolPeeringIpv6PeerSubnet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingProtocolPeeringIpv6PeerSubnet(prefix string, prefixLength int32) *RoutingProtocolPeeringIpv6PeerSubnet {
	this := RoutingProtocolPeeringIpv6PeerSubnet{}
	this.Prefix = prefix
	this.PrefixLength = prefixLength
	return &this
}

// NewRoutingProtocolPeeringIpv6PeerSubnetWithDefaults instantiates a new RoutingProtocolPeeringIpv6PeerSubnet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingProtocolPeeringIpv6PeerSubnetWithDefaults() *RoutingProtocolPeeringIpv6PeerSubnet {
	this := RoutingProtocolPeeringIpv6PeerSubnet{}
	return &this
}

// GetPrefix returns the Prefix field value
func (o *RoutingProtocolPeeringIpv6PeerSubnet) GetPrefix() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value
// and a boolean to check if the value has been set.
func (o *RoutingProtocolPeeringIpv6PeerSubnet) GetPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Prefix, true
}

// SetPrefix sets field value
func (o *RoutingProtocolPeeringIpv6PeerSubnet) SetPrefix(v string) {
	o.Prefix = v
}

// GetPrefixLength returns the PrefixLength field value
func (o *RoutingProtocolPeeringIpv6PeerSubnet) GetPrefixLength() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PrefixLength
}

// GetPrefixLengthOk returns a tuple with the PrefixLength field value
// and a boolean to check if the value has been set.
func (o *RoutingProtocolPeeringIpv6PeerSubnet) GetPrefixLengthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrefixLength, true
}

// SetPrefixLength sets field value
func (o *RoutingProtocolPeeringIpv6PeerSubnet) SetPrefixLength(v int32) {
	o.PrefixLength = v
}

func (o RoutingProtocolPeeringIpv6PeerSubnet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutingProtocolPeeringIpv6PeerSubnet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["prefix"] = o.Prefix
	toSerialize["prefixLength"] = o.PrefixLength

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RoutingProtocolPeeringIpv6PeerSubnet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"prefix",
		"prefixLength",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoutingProtocolPeeringIpv6PeerSubnet := _RoutingProtocolPeeringIpv6PeerSubnet{}

	err = json.Unmarshal(data, &varRoutingProtocolPeeringIpv6PeerSubnet)

	if err != nil {
		return err
	}

	*o = RoutingProtocolPeeringIpv6PeerSubnet(varRoutingProtocolPeeringIpv6PeerSubnet)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "prefix")
		delete(additionalProperties, "prefixLength")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoutingProtocolPeeringIpv6PeerSubnet struct {
	value *RoutingProtocolPeeringIpv6PeerSubnet
	isSet bool
}

func (v NullableRoutingProtocolPeeringIpv6PeerSubnet) Get() *RoutingProtocolPeeringIpv6PeerSubnet {
	return v.value
}

func (v *NullableRoutingProtocolPeeringIpv6PeerSubnet) Set(val *RoutingProtocolPeeringIpv6PeerSubnet) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingProtocolPeeringIpv6PeerSubnet) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingProtocolPeeringIpv6PeerSubnet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingProtocolPeeringIpv6PeerSubnet(val *RoutingProtocolPeeringIpv6PeerSubnet) *NullableRoutingProtocolPeeringIpv6PeerSubnet {
	return &NullableRoutingProtocolPeeringIpv6PeerSubnet{value: val, isSet: true}
}

func (v NullableRoutingProtocolPeeringIpv6PeerSubnet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingProtocolPeeringIpv6PeerSubnet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
