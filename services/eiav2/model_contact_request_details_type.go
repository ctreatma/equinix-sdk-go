/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// ContactRequestDetailsType the model 'ContactRequestDetailsType'
type ContactRequestDetailsType string

// List of ContactRequest_details_type
const (
	CONTACTREQUESTDETAILSTYPE_EMAIL           ContactRequestDetailsType = "EMAIL"
	CONTACTREQUESTDETAILSTYPE_PHONE           ContactRequestDetailsType = "PHONE"
	CONTACTREQUESTDETAILSTYPE_MOBILE          ContactRequestDetailsType = "MOBILE"
	CONTACTREQUESTDETAILSTYPE_SECONDARY_EMAIL ContactRequestDetailsType = "SECONDARY_EMAIL"
)

// All allowed values of ContactRequestDetailsType enum
var AllowedContactRequestDetailsTypeEnumValues = []ContactRequestDetailsType{
	"EMAIL",
	"PHONE",
	"MOBILE",
	"SECONDARY_EMAIL",
}

func (v *ContactRequestDetailsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContactRequestDetailsType(value)
	for _, existing := range AllowedContactRequestDetailsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContactRequestDetailsType", value)
}

// NewContactRequestDetailsTypeFromValue returns a pointer to a valid ContactRequestDetailsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContactRequestDetailsTypeFromValue(v string) (*ContactRequestDetailsType, error) {
	ev := ContactRequestDetailsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContactRequestDetailsType: valid values are %v", v, AllowedContactRequestDetailsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContactRequestDetailsType) IsValid() bool {
	for _, existing := range AllowedContactRequestDetailsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContactRequest_details_type value
func (v ContactRequestDetailsType) Ptr() *ContactRequestDetailsType {
	return &v
}

type NullableContactRequestDetailsType struct {
	value *ContactRequestDetailsType
	isSet bool
}

func (v NullableContactRequestDetailsType) Get() *ContactRequestDetailsType {
	return v.value
}

func (v *NullableContactRequestDetailsType) Set(val *ContactRequestDetailsType) {
	v.value = val
	v.isSet = true
}

func (v NullableContactRequestDetailsType) IsSet() bool {
	return v.isSet
}

func (v *NullableContactRequestDetailsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactRequestDetailsType(val *ContactRequestDetailsType) *NullableContactRequestDetailsType {
	return &NullableContactRequestDetailsType{value: val, isSet: true}
}

func (v NullableContactRequestDetailsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactRequestDetailsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
