/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// ServiceTypeV2 the model 'ServiceTypeV2'
type ServiceTypeV2 string

// List of ServiceTypeV2
const (
	SERVICETYPEV2_SINGLE ServiceTypeV2 = "SINGLE"
	SERVICETYPEV2_DUAL   ServiceTypeV2 = "DUAL"
)

// All allowed values of ServiceTypeV2 enum
var AllowedServiceTypeV2EnumValues = []ServiceTypeV2{
	"SINGLE",
	"DUAL",
}

func (v *ServiceTypeV2) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceTypeV2(value)
	for _, existing := range AllowedServiceTypeV2EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceTypeV2", value)
}

// NewServiceTypeV2FromValue returns a pointer to a valid ServiceTypeV2
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceTypeV2FromValue(v string) (*ServiceTypeV2, error) {
	ev := ServiceTypeV2(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceTypeV2: valid values are %v", v, AllowedServiceTypeV2EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceTypeV2) IsValid() bool {
	for _, existing := range AllowedServiceTypeV2EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceTypeV2 value
func (v ServiceTypeV2) Ptr() *ServiceTypeV2 {
	return &v
}

type NullableServiceTypeV2 struct {
	value *ServiceTypeV2
	isSet bool
}

func (v NullableServiceTypeV2) Get() *ServiceTypeV2 {
	return v.value
}

func (v *NullableServiceTypeV2) Set(val *ServiceTypeV2) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceTypeV2) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceTypeV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceTypeV2(val *ServiceTypeV2) *NullableServiceTypeV2 {
	return &NullableServiceTypeV2{value: val, isSet: true}
}

func (v NullableServiceTypeV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceTypeV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
