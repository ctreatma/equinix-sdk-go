/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
)

// checks if the AdditionalInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdditionalInfo{}

// AdditionalInfo Additional info for error
type AdditionalInfo struct {
	// Reason of the error
	Reason *string `json:"reason,omitempty"`
	// Request property that caused the error
	Property             *string `json:"property,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AdditionalInfo AdditionalInfo

// NewAdditionalInfo instantiates a new AdditionalInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdditionalInfo() *AdditionalInfo {
	this := AdditionalInfo{}
	return &this
}

// NewAdditionalInfoWithDefaults instantiates a new AdditionalInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdditionalInfoWithDefaults() *AdditionalInfo {
	this := AdditionalInfo{}
	return &this
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *AdditionalInfo) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalInfo) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *AdditionalInfo) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *AdditionalInfo) SetReason(v string) {
	o.Reason = &v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *AdditionalInfo) GetProperty() string {
	if o == nil || IsNil(o.Property) {
		var ret string
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalInfo) GetPropertyOk() (*string, bool) {
	if o == nil || IsNil(o.Property) {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *AdditionalInfo) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given string and assigns it to the Property field.
func (o *AdditionalInfo) SetProperty(v string) {
	o.Property = &v
}

func (o AdditionalInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdditionalInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Property) {
		toSerialize["property"] = o.Property
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdditionalInfo) UnmarshalJSON(data []byte) (err error) {
	varAdditionalInfo := _AdditionalInfo{}

	err = json.Unmarshal(data, &varAdditionalInfo)

	if err != nil {
		return err
	}

	*o = AdditionalInfo(varAdditionalInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "reason")
		delete(additionalProperties, "property")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAdditionalInfo struct {
	value *AdditionalInfo
	isSet bool
}

func (v NullableAdditionalInfo) Get() *AdditionalInfo {
	return v.value
}

func (v *NullableAdditionalInfo) Set(val *AdditionalInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAdditionalInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAdditionalInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdditionalInfo(val *AdditionalInfo) *NullableAdditionalInfo {
	return &NullableAdditionalInfo{value: val, isSet: true}
}

func (v NullableAdditionalInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdditionalInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
