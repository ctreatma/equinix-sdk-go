/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// checks if the ServicePurchaseOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicePurchaseOrder{}

// ServicePurchaseOrder struct for ServicePurchaseOrder
type ServicePurchaseOrder struct {
	Type *PurchaseOrderType `json:"type,omitempty"`
	// Purchase order number
	Number string `json:"number"`
	// Amount
	Amount *float32 `json:"amount,omitempty"`
	// Start date in YYYY-MM-DD format
	StartDate *string `json:"startDate,omitempty"`
	// End date in YYYY-MM-DD format
	EndDate *string `json:"endDate,omitempty"`
	// Purchase order description
	Description          *string                         `json:"description,omitempty"`
	Attachment           *ServicePurchaseOrderAttachment `json:"attachment,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServicePurchaseOrder ServicePurchaseOrder

// NewServicePurchaseOrder instantiates a new ServicePurchaseOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicePurchaseOrder(number string) *ServicePurchaseOrder {
	this := ServicePurchaseOrder{}
	this.Number = number
	return &this
}

// NewServicePurchaseOrderWithDefaults instantiates a new ServicePurchaseOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicePurchaseOrderWithDefaults() *ServicePurchaseOrder {
	this := ServicePurchaseOrder{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ServicePurchaseOrder) GetType() PurchaseOrderType {
	if o == nil || IsNil(o.Type) {
		var ret PurchaseOrderType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePurchaseOrder) GetTypeOk() (*PurchaseOrderType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ServicePurchaseOrder) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given PurchaseOrderType and assigns it to the Type field.
func (o *ServicePurchaseOrder) SetType(v PurchaseOrderType) {
	o.Type = &v
}

// GetNumber returns the Number field value
func (o *ServicePurchaseOrder) GetNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *ServicePurchaseOrder) GetNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *ServicePurchaseOrder) SetNumber(v string) {
	o.Number = v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *ServicePurchaseOrder) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePurchaseOrder) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *ServicePurchaseOrder) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *ServicePurchaseOrder) SetAmount(v float32) {
	o.Amount = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ServicePurchaseOrder) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePurchaseOrder) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ServicePurchaseOrder) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *ServicePurchaseOrder) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ServicePurchaseOrder) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePurchaseOrder) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ServicePurchaseOrder) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *ServicePurchaseOrder) SetEndDate(v string) {
	o.EndDate = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ServicePurchaseOrder) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePurchaseOrder) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ServicePurchaseOrder) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ServicePurchaseOrder) SetDescription(v string) {
	o.Description = &v
}

// GetAttachment returns the Attachment field value if set, zero value otherwise.
func (o *ServicePurchaseOrder) GetAttachment() ServicePurchaseOrderAttachment {
	if o == nil || IsNil(o.Attachment) {
		var ret ServicePurchaseOrderAttachment
		return ret
	}
	return *o.Attachment
}

// GetAttachmentOk returns a tuple with the Attachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePurchaseOrder) GetAttachmentOk() (*ServicePurchaseOrderAttachment, bool) {
	if o == nil || IsNil(o.Attachment) {
		return nil, false
	}
	return o.Attachment, true
}

// HasAttachment returns a boolean if a field has been set.
func (o *ServicePurchaseOrder) HasAttachment() bool {
	if o != nil && !IsNil(o.Attachment) {
		return true
	}

	return false
}

// SetAttachment gets a reference to the given ServicePurchaseOrderAttachment and assigns it to the Attachment field.
func (o *ServicePurchaseOrder) SetAttachment(v ServicePurchaseOrderAttachment) {
	o.Attachment = &v
}

func (o ServicePurchaseOrder) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicePurchaseOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["number"] = o.Number
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Attachment) {
		toSerialize["attachment"] = o.Attachment
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServicePurchaseOrder) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"number",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServicePurchaseOrder := _ServicePurchaseOrder{}

	err = json.Unmarshal(data, &varServicePurchaseOrder)

	if err != nil {
		return err
	}

	*o = ServicePurchaseOrder(varServicePurchaseOrder)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "number")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "startDate")
		delete(additionalProperties, "endDate")
		delete(additionalProperties, "description")
		delete(additionalProperties, "attachment")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServicePurchaseOrder struct {
	value *ServicePurchaseOrder
	isSet bool
}

func (v NullableServicePurchaseOrder) Get() *ServicePurchaseOrder {
	return v.value
}

func (v *NullableServicePurchaseOrder) Set(val *ServicePurchaseOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableServicePurchaseOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableServicePurchaseOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicePurchaseOrder(val *ServicePurchaseOrder) *NullableServicePurchaseOrder {
	return &NullableServicePurchaseOrder{value: val, isSet: true}
}

func (v NullableServicePurchaseOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicePurchaseOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
