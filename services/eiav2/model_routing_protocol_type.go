/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// RoutingProtocolType the model 'RoutingProtocolType'
type RoutingProtocolType string

// List of RoutingProtocolType
const (
	ROUTINGPROTOCOLTYPE_DIRECT RoutingProtocolType = "DIRECT"
	ROUTINGPROTOCOLTYPE_STATIC RoutingProtocolType = "STATIC"
	ROUTINGPROTOCOLTYPE_BGP    RoutingProtocolType = "BGP"
)

// All allowed values of RoutingProtocolType enum
var AllowedRoutingProtocolTypeEnumValues = []RoutingProtocolType{
	"DIRECT",
	"STATIC",
	"BGP",
}

func (v *RoutingProtocolType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoutingProtocolType(value)
	for _, existing := range AllowedRoutingProtocolTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoutingProtocolType", value)
}

// NewRoutingProtocolTypeFromValue returns a pointer to a valid RoutingProtocolType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoutingProtocolTypeFromValue(v string) (*RoutingProtocolType, error) {
	ev := RoutingProtocolType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoutingProtocolType: valid values are %v", v, AllowedRoutingProtocolTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoutingProtocolType) IsValid() bool {
	for _, existing := range AllowedRoutingProtocolTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoutingProtocolType value
func (v RoutingProtocolType) Ptr() *RoutingProtocolType {
	return &v
}

type NullableRoutingProtocolType struct {
	value *RoutingProtocolType
	isSet bool
}

func (v NullableRoutingProtocolType) Get() *RoutingProtocolType {
	return v.value
}

func (v *NullableRoutingProtocolType) Set(val *RoutingProtocolType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingProtocolType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingProtocolType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingProtocolType(val *RoutingProtocolType) *NullableRoutingProtocolType {
	return &NullableRoutingProtocolType{value: val, isSet: true}
}

func (v NullableRoutingProtocolType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingProtocolType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
