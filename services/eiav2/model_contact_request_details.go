/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
)

// checks if the ContactRequestDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactRequestDetails{}

// ContactRequestDetails struct for ContactRequestDetails
type ContactRequestDetails struct {
	Type                 *ContactRequestDetailsType `json:"type,omitempty"`
	Value                *string                    `json:"value,omitempty"`
	Notes                *string                    `json:"notes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ContactRequestDetails ContactRequestDetails

// NewContactRequestDetails instantiates a new ContactRequestDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactRequestDetails() *ContactRequestDetails {
	this := ContactRequestDetails{}
	return &this
}

// NewContactRequestDetailsWithDefaults instantiates a new ContactRequestDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactRequestDetailsWithDefaults() *ContactRequestDetails {
	this := ContactRequestDetails{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ContactRequestDetails) GetType() ContactRequestDetailsType {
	if o == nil || IsNil(o.Type) {
		var ret ContactRequestDetailsType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactRequestDetails) GetTypeOk() (*ContactRequestDetailsType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ContactRequestDetails) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ContactRequestDetailsType and assigns it to the Type field.
func (o *ContactRequestDetails) SetType(v ContactRequestDetailsType) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ContactRequestDetails) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactRequestDetails) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ContactRequestDetails) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ContactRequestDetails) SetValue(v string) {
	o.Value = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *ContactRequestDetails) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactRequestDetails) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *ContactRequestDetails) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *ContactRequestDetails) SetNotes(v string) {
	o.Notes = &v
}

func (o ContactRequestDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactRequestDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ContactRequestDetails) UnmarshalJSON(data []byte) (err error) {
	varContactRequestDetails := _ContactRequestDetails{}

	err = json.Unmarshal(data, &varContactRequestDetails)

	if err != nil {
		return err
	}

	*o = ContactRequestDetails(varContactRequestDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "value")
		delete(additionalProperties, "notes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableContactRequestDetails struct {
	value *ContactRequestDetails
	isSet bool
}

func (v NullableContactRequestDetails) Get() *ContactRequestDetails {
	return v.value
}

func (v *NullableContactRequestDetails) Set(val *ContactRequestDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableContactRequestDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableContactRequestDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactRequestDetails(val *ContactRequestDetails) *NullableContactRequestDetails {
	return &NullableContactRequestDetails{value: val, isSet: true}
}

func (v NullableContactRequestDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactRequestDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
