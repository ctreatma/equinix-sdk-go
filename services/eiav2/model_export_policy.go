/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

API version: 2.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// ExportPolicy Denotes which routes should be advertised to the internet
type ExportPolicy string

// List of ExportPolicy
const (
	EXPORTPOLICY_FULL         ExportPolicy = "FULL"
	EXPORTPOLICY_DEFAULT      ExportPolicy = "DEFAULT"
	EXPORTPOLICY_FULL_DEFAULT ExportPolicy = "FULL_DEFAULT"
	EXPORTPOLICY_PARTIAL      ExportPolicy = "PARTIAL"
)

// All allowed values of ExportPolicy enum
var AllowedExportPolicyEnumValues = []ExportPolicy{
	"FULL",
	"DEFAULT",
	"FULL_DEFAULT",
	"PARTIAL",
}

func (v *ExportPolicy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExportPolicy(value)
	for _, existing := range AllowedExportPolicyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExportPolicy", value)
}

// NewExportPolicyFromValue returns a pointer to a valid ExportPolicy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExportPolicyFromValue(v string) (*ExportPolicy, error) {
	ev := ExportPolicy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExportPolicy: valid values are %v", v, AllowedExportPolicyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExportPolicy) IsValid() bool {
	for _, existing := range AllowedExportPolicyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExportPolicy value
func (v ExportPolicy) Ptr() *ExportPolicy {
	return &v
}

type NullableExportPolicy struct {
	value *ExportPolicy
	isSet bool
}

func (v NullableExportPolicy) Get() *ExportPolicy {
	return v.value
}

func (v *NullableExportPolicy) Set(val *ExportPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableExportPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableExportPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportPolicy(val *ExportPolicy) *NullableExportPolicy {
	return &NullableExportPolicy{value: val, isSet: true}
}

func (v NullableExportPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
