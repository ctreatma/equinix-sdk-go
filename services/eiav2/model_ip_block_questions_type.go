/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

API version: 2.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// IpBlockQuestionsType Type of question relevant to requesting public IP Subnet
type IpBlockQuestionsType string

// List of IpBlockQuestions_type
const (
	IPBLOCKQUESTIONSTYPE_PRIVATE_SPACE_CONSIDERED IpBlockQuestionsType = "PRIVATE_SPACE_CONSIDERED"
	IPBLOCKQUESTIONSTYPE_REFUSED_PREVIOUSLY       IpBlockQuestionsType = "REFUSED_PREVIOUSLY"
	IPBLOCKQUESTIONSTYPE_RETURNING_ADDRESS_SPACE  IpBlockQuestionsType = "RETURNING_ADDRESS_SPACE"
)

// All allowed values of IpBlockQuestionsType enum
var AllowedIpBlockQuestionsTypeEnumValues = []IpBlockQuestionsType{
	"PRIVATE_SPACE_CONSIDERED",
	"REFUSED_PREVIOUSLY",
	"RETURNING_ADDRESS_SPACE",
}

func (v *IpBlockQuestionsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IpBlockQuestionsType(value)
	for _, existing := range AllowedIpBlockQuestionsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IpBlockQuestionsType", value)
}

// NewIpBlockQuestionsTypeFromValue returns a pointer to a valid IpBlockQuestionsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIpBlockQuestionsTypeFromValue(v string) (*IpBlockQuestionsType, error) {
	ev := IpBlockQuestionsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IpBlockQuestionsType: valid values are %v", v, AllowedIpBlockQuestionsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IpBlockQuestionsType) IsValid() bool {
	for _, existing := range AllowedIpBlockQuestionsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IpBlockQuestions_type value
func (v IpBlockQuestionsType) Ptr() *IpBlockQuestionsType {
	return &v
}

type NullableIpBlockQuestionsType struct {
	value *IpBlockQuestionsType
	isSet bool
}

func (v NullableIpBlockQuestionsType) Get() *IpBlockQuestionsType {
	return v.value
}

func (v *NullableIpBlockQuestionsType) Set(val *IpBlockQuestionsType) {
	v.value = val
	v.isSet = true
}

func (v NullableIpBlockQuestionsType) IsSet() bool {
	return v.isSet
}

func (v *NullableIpBlockQuestionsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpBlockQuestionsType(val *IpBlockQuestionsType) *NullableIpBlockQuestionsType {
	return &NullableIpBlockQuestionsType{value: val, isSet: true}
}

func (v NullableIpBlockQuestionsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpBlockQuestionsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
