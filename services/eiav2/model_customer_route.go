/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// checks if the CustomerRoute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerRoute{}

// CustomerRoute struct for CustomerRoute
type CustomerRoute struct {
	IpBlock              CustomerIpBlock `json:"ipBlock"`
	AdditionalProperties map[string]interface{}
}

type _CustomerRoute CustomerRoute

// NewCustomerRoute instantiates a new CustomerRoute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerRoute(ipBlock CustomerIpBlock) *CustomerRoute {
	this := CustomerRoute{}
	this.IpBlock = ipBlock
	return &this
}

// NewCustomerRouteWithDefaults instantiates a new CustomerRoute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerRouteWithDefaults() *CustomerRoute {
	this := CustomerRoute{}
	return &this
}

// GetIpBlock returns the IpBlock field value
func (o *CustomerRoute) GetIpBlock() CustomerIpBlock {
	if o == nil {
		var ret CustomerIpBlock
		return ret
	}

	return o.IpBlock
}

// GetIpBlockOk returns a tuple with the IpBlock field value
// and a boolean to check if the value has been set.
func (o *CustomerRoute) GetIpBlockOk() (*CustomerIpBlock, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpBlock, true
}

// SetIpBlock sets field value
func (o *CustomerRoute) SetIpBlock(v CustomerIpBlock) {
	o.IpBlock = v
}

func (o CustomerRoute) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerRoute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ipBlock"] = o.IpBlock

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CustomerRoute) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ipBlock",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomerRoute := _CustomerRoute{}

	err = json.Unmarshal(data, &varCustomerRoute)

	if err != nil {
		return err
	}

	*o = CustomerRoute(varCustomerRoute)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ipBlock")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCustomerRoute struct {
	value *CustomerRoute
	isSet bool
}

func (v NullableCustomerRoute) Get() *CustomerRoute {
	return v.value
}

func (v *NullableCustomerRoute) Set(val *CustomerRoute) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerRoute) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerRoute(val *CustomerRoute) *NullableCustomerRoute {
	return &NullableCustomerRoute{value: val, isSet: true}
}

func (v NullableCustomerRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
