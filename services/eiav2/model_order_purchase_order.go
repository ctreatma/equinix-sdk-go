/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

API version: 2.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// checks if the OrderPurchaseOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderPurchaseOrder{}

// OrderPurchaseOrder struct for OrderPurchaseOrder
type OrderPurchaseOrder struct {
	Href                 string                       `json:"href"`
	Number               string                       `json:"number"`
	Type                 *OrderPurchaseOrderAllOfType `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrderPurchaseOrder OrderPurchaseOrder

// NewOrderPurchaseOrder instantiates a new OrderPurchaseOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderPurchaseOrder(href string, number string) *OrderPurchaseOrder {
	this := OrderPurchaseOrder{}
	this.Href = href
	this.Number = number
	return &this
}

// NewOrderPurchaseOrderWithDefaults instantiates a new OrderPurchaseOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderPurchaseOrderWithDefaults() *OrderPurchaseOrder {
	this := OrderPurchaseOrder{}
	return &this
}

// GetHref returns the Href field value
func (o *OrderPurchaseOrder) GetHref() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Href
}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
func (o *OrderPurchaseOrder) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Href, true
}

// SetHref sets field value
func (o *OrderPurchaseOrder) SetHref(v string) {
	o.Href = v
}

// GetNumber returns the Number field value
func (o *OrderPurchaseOrder) GetNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *OrderPurchaseOrder) GetNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *OrderPurchaseOrder) SetNumber(v string) {
	o.Number = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OrderPurchaseOrder) GetType() OrderPurchaseOrderAllOfType {
	if o == nil || IsNil(o.Type) {
		var ret OrderPurchaseOrderAllOfType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderPurchaseOrder) GetTypeOk() (*OrderPurchaseOrderAllOfType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OrderPurchaseOrder) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given OrderPurchaseOrderAllOfType and assigns it to the Type field.
func (o *OrderPurchaseOrder) SetType(v OrderPurchaseOrderAllOfType) {
	o.Type = &v
}

func (o OrderPurchaseOrder) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderPurchaseOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["href"] = o.Href
	toSerialize["number"] = o.Number
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrderPurchaseOrder) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"href",
		"number",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderPurchaseOrder := _OrderPurchaseOrder{}

	err = json.Unmarshal(data, &varOrderPurchaseOrder)

	if err != nil {
		return err
	}

	*o = OrderPurchaseOrder(varOrderPurchaseOrder)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "href")
		delete(additionalProperties, "number")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrderPurchaseOrder struct {
	value *OrderPurchaseOrder
	isSet bool
}

func (v NullableOrderPurchaseOrder) Get() *OrderPurchaseOrder {
	return v.value
}

func (v *NullableOrderPurchaseOrder) Set(val *OrderPurchaseOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderPurchaseOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderPurchaseOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderPurchaseOrder(val *OrderPurchaseOrder) *NullableOrderPurchaseOrder {
	return &NullableOrderPurchaseOrder{value: val, isSet: true}
}

func (v NullableOrderPurchaseOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderPurchaseOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
