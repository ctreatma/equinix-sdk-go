/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the RoutingProtocolStatic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutingProtocolStatic{}

// RoutingProtocolStatic struct for RoutingProtocolStatic
type RoutingProtocolStatic struct {
	RoutingProtocolReadModel
	AdditionalProperties map[string]interface{}
}

type _RoutingProtocolStatic RoutingProtocolStatic

// NewRoutingProtocolStatic instantiates a new RoutingProtocolStatic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingProtocolStatic(type_ RoutingProtocolType, name string, changeLog ChangeLog, links []Link) *RoutingProtocolStatic {
	this := RoutingProtocolStatic{}
	this.Type = type_
	this.Name = name
	this.ChangeLog = changeLog
	this.Links = links
	return &this
}

// NewRoutingProtocolStaticWithDefaults instantiates a new RoutingProtocolStatic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingProtocolStaticWithDefaults() *RoutingProtocolStatic {
	this := RoutingProtocolStatic{}
	return &this
}

func (o RoutingProtocolStatic) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutingProtocolStatic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedRoutingProtocolReadModel, errRoutingProtocolReadModel := json.Marshal(o.RoutingProtocolReadModel)
	if errRoutingProtocolReadModel != nil {
		return map[string]interface{}{}, errRoutingProtocolReadModel
	}
	errRoutingProtocolReadModel = json.Unmarshal([]byte(serializedRoutingProtocolReadModel), &toSerialize)
	if errRoutingProtocolReadModel != nil {
		return map[string]interface{}{}, errRoutingProtocolReadModel
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RoutingProtocolStatic) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"name",
		"changeLog",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	type RoutingProtocolStaticWithoutEmbeddedStruct struct {
	}

	varRoutingProtocolStaticWithoutEmbeddedStruct := RoutingProtocolStaticWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varRoutingProtocolStaticWithoutEmbeddedStruct)
	if err == nil {
		varRoutingProtocolStatic := _RoutingProtocolStatic{}
		*o = RoutingProtocolStatic(varRoutingProtocolStatic)
	} else {
		return err
	}

	varRoutingProtocolStatic := _RoutingProtocolStatic{}

	err = json.Unmarshal(data, &varRoutingProtocolStatic)
	if err == nil {
		o.RoutingProtocolReadModel = varRoutingProtocolStatic.RoutingProtocolReadModel
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {

		// remove fields from embedded structs
		reflectRoutingProtocolReadModel := reflect.ValueOf(o.RoutingProtocolReadModel)
		for i := 0; i < reflectRoutingProtocolReadModel.Type().NumField(); i++ {
			t := reflectRoutingProtocolReadModel.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoutingProtocolStatic struct {
	value *RoutingProtocolStatic
	isSet bool
}

func (v NullableRoutingProtocolStatic) Get() *RoutingProtocolStatic {
	return v.value
}

func (v *NullableRoutingProtocolStatic) Set(val *RoutingProtocolStatic) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingProtocolStatic) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingProtocolStatic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingProtocolStatic(val *RoutingProtocolStatic) *NullableRoutingProtocolStatic {
	return &NullableRoutingProtocolStatic{value: val, isSet: true}
}

func (v NullableRoutingProtocolStatic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingProtocolStatic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
