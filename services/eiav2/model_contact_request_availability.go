/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

API version: 2.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// ContactRequestAvailability the model 'ContactRequestAvailability'
type ContactRequestAvailability string

// List of ContactRequest_availability
const (
	CONTACTREQUESTAVAILABILITY_WORK_HOURS              ContactRequestAvailability = "WORK_HOURS"
	CONTACTREQUESTAVAILABILITY_ANYTIME                 ContactRequestAvailability = "ANYTIME"
	CONTACTREQUESTAVAILABILITY_CUSTOMER_BUSINESS_HOURS ContactRequestAvailability = "CUSTOMER_BUSINESS_HOURS"
	CONTACTREQUESTAVAILABILITY_NOT_AVAILABLE           ContactRequestAvailability = "NOT_AVAILABLE"
)

// All allowed values of ContactRequestAvailability enum
var AllowedContactRequestAvailabilityEnumValues = []ContactRequestAvailability{
	"WORK_HOURS",
	"ANYTIME",
	"CUSTOMER_BUSINESS_HOURS",
	"NOT_AVAILABLE",
}

func (v *ContactRequestAvailability) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContactRequestAvailability(value)
	for _, existing := range AllowedContactRequestAvailabilityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContactRequestAvailability", value)
}

// NewContactRequestAvailabilityFromValue returns a pointer to a valid ContactRequestAvailability
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContactRequestAvailabilityFromValue(v string) (*ContactRequestAvailability, error) {
	ev := ContactRequestAvailability(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContactRequestAvailability: valid values are %v", v, AllowedContactRequestAvailabilityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContactRequestAvailability) IsValid() bool {
	for _, existing := range AllowedContactRequestAvailabilityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContactRequest_availability value
func (v ContactRequestAvailability) Ptr() *ContactRequestAvailability {
	return &v
}

type NullableContactRequestAvailability struct {
	value *ContactRequestAvailability
	isSet bool
}

func (v NullableContactRequestAvailability) Get() *ContactRequestAvailability {
	return v.value
}

func (v *NullableContactRequestAvailability) Set(val *ContactRequestAvailability) {
	v.value = val
	v.isSet = true
}

func (v NullableContactRequestAvailability) IsSet() bool {
	return v.isSet
}

func (v *NullableContactRequestAvailability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactRequestAvailability(val *ContactRequestAvailability) *NullableContactRequestAvailability {
	return &NullableContactRequestAvailability{value: val, isSet: true}
}

func (v NullableContactRequestAvailability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactRequestAvailability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
