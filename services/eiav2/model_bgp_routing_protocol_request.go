/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the BgpRoutingProtocolRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BgpRoutingProtocolRequest{}

// BgpRoutingProtocolRequest struct for BgpRoutingProtocolRequest
type BgpRoutingProtocolRequest struct {
	RoutingProtocolRequest
	CustomerAsnRange *BgpRoutingProtocolRequestAllOfCustomerAsnRange `json:"customerAsnRange,omitempty"`
	// Customer Autonomous System Number
	CustomerAsn *int64 `json:"customerAsn,omitempty"`
	// BGP authentication key
	BgpAuthKey           *string                                    `json:"bgpAuthKey,omitempty"`
	ExportPolicy         BgpRoutingProtocolRequestAllOfExportPolicy `json:"exportPolicy"`
	Ipv4                 *RoutingProtocolIpv4Request                `json:"ipv4,omitempty"`
	Ipv6                 *RoutingProtocolIpv6Request                `json:"ipv6,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BgpRoutingProtocolRequest BgpRoutingProtocolRequest

// NewBgpRoutingProtocolRequest instantiates a new BgpRoutingProtocolRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBgpRoutingProtocolRequest(exportPolicy BgpRoutingProtocolRequestAllOfExportPolicy, type_ RoutingProtocolType) *BgpRoutingProtocolRequest {
	this := BgpRoutingProtocolRequest{}
	this.Type = type_
	this.ExportPolicy = exportPolicy
	return &this
}

// NewBgpRoutingProtocolRequestWithDefaults instantiates a new BgpRoutingProtocolRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBgpRoutingProtocolRequestWithDefaults() *BgpRoutingProtocolRequest {
	this := BgpRoutingProtocolRequest{}
	return &this
}

// GetCustomerAsnRange returns the CustomerAsnRange field value if set, zero value otherwise.
func (o *BgpRoutingProtocolRequest) GetCustomerAsnRange() BgpRoutingProtocolRequestAllOfCustomerAsnRange {
	if o == nil || IsNil(o.CustomerAsnRange) {
		var ret BgpRoutingProtocolRequestAllOfCustomerAsnRange
		return ret
	}
	return *o.CustomerAsnRange
}

// GetCustomerAsnRangeOk returns a tuple with the CustomerAsnRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRoutingProtocolRequest) GetCustomerAsnRangeOk() (*BgpRoutingProtocolRequestAllOfCustomerAsnRange, bool) {
	if o == nil || IsNil(o.CustomerAsnRange) {
		return nil, false
	}
	return o.CustomerAsnRange, true
}

// HasCustomerAsnRange returns a boolean if a field has been set.
func (o *BgpRoutingProtocolRequest) HasCustomerAsnRange() bool {
	if o != nil && !IsNil(o.CustomerAsnRange) {
		return true
	}

	return false
}

// SetCustomerAsnRange gets a reference to the given BgpRoutingProtocolRequestAllOfCustomerAsnRange and assigns it to the CustomerAsnRange field.
func (o *BgpRoutingProtocolRequest) SetCustomerAsnRange(v BgpRoutingProtocolRequestAllOfCustomerAsnRange) {
	o.CustomerAsnRange = &v
}

// GetCustomerAsn returns the CustomerAsn field value if set, zero value otherwise.
func (o *BgpRoutingProtocolRequest) GetCustomerAsn() int64 {
	if o == nil || IsNil(o.CustomerAsn) {
		var ret int64
		return ret
	}
	return *o.CustomerAsn
}

// GetCustomerAsnOk returns a tuple with the CustomerAsn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRoutingProtocolRequest) GetCustomerAsnOk() (*int64, bool) {
	if o == nil || IsNil(o.CustomerAsn) {
		return nil, false
	}
	return o.CustomerAsn, true
}

// HasCustomerAsn returns a boolean if a field has been set.
func (o *BgpRoutingProtocolRequest) HasCustomerAsn() bool {
	if o != nil && !IsNil(o.CustomerAsn) {
		return true
	}

	return false
}

// SetCustomerAsn gets a reference to the given int64 and assigns it to the CustomerAsn field.
func (o *BgpRoutingProtocolRequest) SetCustomerAsn(v int64) {
	o.CustomerAsn = &v
}

// GetBgpAuthKey returns the BgpAuthKey field value if set, zero value otherwise.
func (o *BgpRoutingProtocolRequest) GetBgpAuthKey() string {
	if o == nil || IsNil(o.BgpAuthKey) {
		var ret string
		return ret
	}
	return *o.BgpAuthKey
}

// GetBgpAuthKeyOk returns a tuple with the BgpAuthKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRoutingProtocolRequest) GetBgpAuthKeyOk() (*string, bool) {
	if o == nil || IsNil(o.BgpAuthKey) {
		return nil, false
	}
	return o.BgpAuthKey, true
}

// HasBgpAuthKey returns a boolean if a field has been set.
func (o *BgpRoutingProtocolRequest) HasBgpAuthKey() bool {
	if o != nil && !IsNil(o.BgpAuthKey) {
		return true
	}

	return false
}

// SetBgpAuthKey gets a reference to the given string and assigns it to the BgpAuthKey field.
func (o *BgpRoutingProtocolRequest) SetBgpAuthKey(v string) {
	o.BgpAuthKey = &v
}

// GetExportPolicy returns the ExportPolicy field value
func (o *BgpRoutingProtocolRequest) GetExportPolicy() BgpRoutingProtocolRequestAllOfExportPolicy {
	if o == nil {
		var ret BgpRoutingProtocolRequestAllOfExportPolicy
		return ret
	}

	return o.ExportPolicy
}

// GetExportPolicyOk returns a tuple with the ExportPolicy field value
// and a boolean to check if the value has been set.
func (o *BgpRoutingProtocolRequest) GetExportPolicyOk() (*BgpRoutingProtocolRequestAllOfExportPolicy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExportPolicy, true
}

// SetExportPolicy sets field value
func (o *BgpRoutingProtocolRequest) SetExportPolicy(v BgpRoutingProtocolRequestAllOfExportPolicy) {
	o.ExportPolicy = v
}

// GetIpv4 returns the Ipv4 field value if set, zero value otherwise.
func (o *BgpRoutingProtocolRequest) GetIpv4() RoutingProtocolIpv4Request {
	if o == nil || IsNil(o.Ipv4) {
		var ret RoutingProtocolIpv4Request
		return ret
	}
	return *o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRoutingProtocolRequest) GetIpv4Ok() (*RoutingProtocolIpv4Request, bool) {
	if o == nil || IsNil(o.Ipv4) {
		return nil, false
	}
	return o.Ipv4, true
}

// HasIpv4 returns a boolean if a field has been set.
func (o *BgpRoutingProtocolRequest) HasIpv4() bool {
	if o != nil && !IsNil(o.Ipv4) {
		return true
	}

	return false
}

// SetIpv4 gets a reference to the given RoutingProtocolIpv4Request and assigns it to the Ipv4 field.
func (o *BgpRoutingProtocolRequest) SetIpv4(v RoutingProtocolIpv4Request) {
	o.Ipv4 = &v
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise.
func (o *BgpRoutingProtocolRequest) GetIpv6() RoutingProtocolIpv6Request {
	if o == nil || IsNil(o.Ipv6) {
		var ret RoutingProtocolIpv6Request
		return ret
	}
	return *o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRoutingProtocolRequest) GetIpv6Ok() (*RoutingProtocolIpv6Request, bool) {
	if o == nil || IsNil(o.Ipv6) {
		return nil, false
	}
	return o.Ipv6, true
}

// HasIpv6 returns a boolean if a field has been set.
func (o *BgpRoutingProtocolRequest) HasIpv6() bool {
	if o != nil && !IsNil(o.Ipv6) {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given RoutingProtocolIpv6Request and assigns it to the Ipv6 field.
func (o *BgpRoutingProtocolRequest) SetIpv6(v RoutingProtocolIpv6Request) {
	o.Ipv6 = &v
}

func (o BgpRoutingProtocolRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BgpRoutingProtocolRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedRoutingProtocolRequest, errRoutingProtocolRequest := json.Marshal(o.RoutingProtocolRequest)
	if errRoutingProtocolRequest != nil {
		return map[string]interface{}{}, errRoutingProtocolRequest
	}
	errRoutingProtocolRequest = json.Unmarshal([]byte(serializedRoutingProtocolRequest), &toSerialize)
	if errRoutingProtocolRequest != nil {
		return map[string]interface{}{}, errRoutingProtocolRequest
	}
	if !IsNil(o.CustomerAsnRange) {
		toSerialize["customerAsnRange"] = o.CustomerAsnRange
	}
	if !IsNil(o.CustomerAsn) {
		toSerialize["customerAsn"] = o.CustomerAsn
	}
	if !IsNil(o.BgpAuthKey) {
		toSerialize["bgpAuthKey"] = o.BgpAuthKey
	}
	toSerialize["exportPolicy"] = o.ExportPolicy
	if !IsNil(o.Ipv4) {
		toSerialize["ipv4"] = o.Ipv4
	}
	if !IsNil(o.Ipv6) {
		toSerialize["ipv6"] = o.Ipv6
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BgpRoutingProtocolRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"exportPolicy",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	type BgpRoutingProtocolRequestWithoutEmbeddedStruct struct {
		CustomerAsnRange *BgpRoutingProtocolRequestAllOfCustomerAsnRange `json:"customerAsnRange,omitempty"`
		// Customer Autonomous System Number
		CustomerAsn *int64 `json:"customerAsn,omitempty"`
		// BGP authentication key
		BgpAuthKey   *string                                    `json:"bgpAuthKey,omitempty"`
		ExportPolicy BgpRoutingProtocolRequestAllOfExportPolicy `json:"exportPolicy"`
		Ipv4         *RoutingProtocolIpv4Request                `json:"ipv4,omitempty"`
		Ipv6         *RoutingProtocolIpv6Request                `json:"ipv6,omitempty"`
	}

	varBgpRoutingProtocolRequestWithoutEmbeddedStruct := BgpRoutingProtocolRequestWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varBgpRoutingProtocolRequestWithoutEmbeddedStruct)
	if err == nil {
		varBgpRoutingProtocolRequest := _BgpRoutingProtocolRequest{}
		varBgpRoutingProtocolRequest.CustomerAsnRange = varBgpRoutingProtocolRequestWithoutEmbeddedStruct.CustomerAsnRange
		varBgpRoutingProtocolRequest.CustomerAsn = varBgpRoutingProtocolRequestWithoutEmbeddedStruct.CustomerAsn
		varBgpRoutingProtocolRequest.BgpAuthKey = varBgpRoutingProtocolRequestWithoutEmbeddedStruct.BgpAuthKey
		varBgpRoutingProtocolRequest.ExportPolicy = varBgpRoutingProtocolRequestWithoutEmbeddedStruct.ExportPolicy
		varBgpRoutingProtocolRequest.Ipv4 = varBgpRoutingProtocolRequestWithoutEmbeddedStruct.Ipv4
		varBgpRoutingProtocolRequest.Ipv6 = varBgpRoutingProtocolRequestWithoutEmbeddedStruct.Ipv6
		*o = BgpRoutingProtocolRequest(varBgpRoutingProtocolRequest)
	} else {
		return err
	}

	varBgpRoutingProtocolRequest := _BgpRoutingProtocolRequest{}

	err = json.Unmarshal(data, &varBgpRoutingProtocolRequest)
	if err == nil {
		o.RoutingProtocolRequest = varBgpRoutingProtocolRequest.RoutingProtocolRequest
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "customerAsnRange")
		delete(additionalProperties, "customerAsn")
		delete(additionalProperties, "bgpAuthKey")
		delete(additionalProperties, "exportPolicy")
		delete(additionalProperties, "ipv4")
		delete(additionalProperties, "ipv6")

		// remove fields from embedded structs
		reflectRoutingProtocolRequest := reflect.ValueOf(o.RoutingProtocolRequest)
		for i := 0; i < reflectRoutingProtocolRequest.Type().NumField(); i++ {
			t := reflectRoutingProtocolRequest.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBgpRoutingProtocolRequest struct {
	value *BgpRoutingProtocolRequest
	isSet bool
}

func (v NullableBgpRoutingProtocolRequest) Get() *BgpRoutingProtocolRequest {
	return v.value
}

func (v *NullableBgpRoutingProtocolRequest) Set(val *BgpRoutingProtocolRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBgpRoutingProtocolRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBgpRoutingProtocolRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBgpRoutingProtocolRequest(val *BgpRoutingProtocolRequest) *NullableBgpRoutingProtocolRequest {
	return &NullableBgpRoutingProtocolRequest{value: val, isSet: true}
}

func (v NullableBgpRoutingProtocolRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBgpRoutingProtocolRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
