/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

API version: 2.0
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// checks if the ServiceBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceBase{}

// ServiceBase struct for ServiceBase
type ServiceBase struct {
	Tags    []string    `json:"tags,omitempty"`
	Type    ServiceType `json:"type"`
	UseCase UseCaseType `json:"useCase"`
	// Name of the service instance
	Name string `json:"name"`
	// Description of the service instance
	Description *string `json:"description,omitempty"`
	// Service bandwidth in Mbps
	Bandwidth int32 `json:"bandwidth"`
	// Service min bandwidth commit in Mbps
	MinBandwidthCommit   *int32 `json:"minBandwidthCommit,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServiceBase ServiceBase

// NewServiceBase instantiates a new ServiceBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceBase(type_ ServiceType, useCase UseCaseType, name string, bandwidth int32) *ServiceBase {
	this := ServiceBase{}
	this.Type = type_
	this.UseCase = useCase
	this.Name = name
	this.Bandwidth = bandwidth
	return &this
}

// NewServiceBaseWithDefaults instantiates a new ServiceBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceBaseWithDefaults() *ServiceBase {
	this := ServiceBase{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ServiceBase) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceBase) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ServiceBase) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ServiceBase) SetTags(v []string) {
	o.Tags = v
}

// GetType returns the Type field value
func (o *ServiceBase) GetType() ServiceType {
	if o == nil {
		var ret ServiceType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ServiceBase) GetTypeOk() (*ServiceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ServiceBase) SetType(v ServiceType) {
	o.Type = v
}

// GetUseCase returns the UseCase field value
func (o *ServiceBase) GetUseCase() UseCaseType {
	if o == nil {
		var ret UseCaseType
		return ret
	}

	return o.UseCase
}

// GetUseCaseOk returns a tuple with the UseCase field value
// and a boolean to check if the value has been set.
func (o *ServiceBase) GetUseCaseOk() (*UseCaseType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseCase, true
}

// SetUseCase sets field value
func (o *ServiceBase) SetUseCase(v UseCaseType) {
	o.UseCase = v
}

// GetName returns the Name field value
func (o *ServiceBase) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ServiceBase) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ServiceBase) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ServiceBase) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceBase) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ServiceBase) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ServiceBase) SetDescription(v string) {
	o.Description = &v
}

// GetBandwidth returns the Bandwidth field value
func (o *ServiceBase) GetBandwidth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Bandwidth
}

// GetBandwidthOk returns a tuple with the Bandwidth field value
// and a boolean to check if the value has been set.
func (o *ServiceBase) GetBandwidthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bandwidth, true
}

// SetBandwidth sets field value
func (o *ServiceBase) SetBandwidth(v int32) {
	o.Bandwidth = v
}

// GetMinBandwidthCommit returns the MinBandwidthCommit field value if set, zero value otherwise.
func (o *ServiceBase) GetMinBandwidthCommit() int32 {
	if o == nil || IsNil(o.MinBandwidthCommit) {
		var ret int32
		return ret
	}
	return *o.MinBandwidthCommit
}

// GetMinBandwidthCommitOk returns a tuple with the MinBandwidthCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceBase) GetMinBandwidthCommitOk() (*int32, bool) {
	if o == nil || IsNil(o.MinBandwidthCommit) {
		return nil, false
	}
	return o.MinBandwidthCommit, true
}

// HasMinBandwidthCommit returns a boolean if a field has been set.
func (o *ServiceBase) HasMinBandwidthCommit() bool {
	if o != nil && !IsNil(o.MinBandwidthCommit) {
		return true
	}

	return false
}

// SetMinBandwidthCommit gets a reference to the given int32 and assigns it to the MinBandwidthCommit field.
func (o *ServiceBase) SetMinBandwidthCommit(v int32) {
	o.MinBandwidthCommit = &v
}

func (o ServiceBase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["type"] = o.Type
	toSerialize["useCase"] = o.UseCase
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["bandwidth"] = o.Bandwidth
	if !IsNil(o.MinBandwidthCommit) {
		toSerialize["minBandwidthCommit"] = o.MinBandwidthCommit
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServiceBase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"useCase",
		"name",
		"bandwidth",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceBase := _ServiceBase{}

	err = json.Unmarshal(data, &varServiceBase)

	if err != nil {
		return err
	}

	*o = ServiceBase(varServiceBase)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tags")
		delete(additionalProperties, "type")
		delete(additionalProperties, "useCase")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "bandwidth")
		delete(additionalProperties, "minBandwidthCommit")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServiceBase struct {
	value *ServiceBase
	isSet bool
}

func (v NullableServiceBase) Get() *ServiceBase {
	return v.value
}

func (v *NullableServiceBase) Set(val *ServiceBase) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceBase) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceBase(val *ServiceBase) *NullableServiceBase {
	return &NullableServiceBase{value: val, isSet: true}
}

func (v NullableServiceBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
