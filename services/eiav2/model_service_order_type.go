/*
Equinix Internet Access API

Equinix Internet Access provides direct access to the Internet with scalable bandwidth options in IBX data centers.

Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eiav2

import (
	"encoding/json"
	"fmt"
)

// ServiceOrderType the model 'ServiceOrderType'
type ServiceOrderType string

// List of ServiceOrderType
const (
	SERVICEORDERTYPE_NEW       ServiceOrderType = "NEW"
	SERVICEORDERTYPE_AMENDMENT ServiceOrderType = "AMENDMENT"
)

// All allowed values of ServiceOrderType enum
var AllowedServiceOrderTypeEnumValues = []ServiceOrderType{
	"NEW",
	"AMENDMENT",
}

func (v *ServiceOrderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceOrderType(value)
	for _, existing := range AllowedServiceOrderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceOrderType", value)
}

// NewServiceOrderTypeFromValue returns a pointer to a valid ServiceOrderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceOrderTypeFromValue(v string) (*ServiceOrderType, error) {
	ev := ServiceOrderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceOrderType: valid values are %v", v, AllowedServiceOrderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceOrderType) IsValid() bool {
	for _, existing := range AllowedServiceOrderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceOrderType value
func (v ServiceOrderType) Ptr() *ServiceOrderType {
	return &v
}

type NullableServiceOrderType struct {
	value *ServiceOrderType
	isSet bool
}

func (v NullableServiceOrderType) Get() *ServiceOrderType {
	return v.value
}

func (v *NullableServiceOrderType) Set(val *ServiceOrderType) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceOrderType) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceOrderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceOrderType(val *ServiceOrderType) *NullableServiceOrderType {
	return &NullableServiceOrderType{value: val, isSet: true}
}

func (v NullableServiceOrderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceOrderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
